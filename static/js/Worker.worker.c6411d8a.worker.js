(()=>{"use strict";class t{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;this.lossP=t,this.lossV=i}}const i=class{constructor(t,i,n,s,o){this.training=t,this.config=i,this.shapeData=n,this.checkpointData=s,this.playing=o,this.frameTime=Math.floor(i.timeStep*i.frameSteps*1e3+.5),this.config.hiddenLayerSizes=this.toNativeArray(this.config.hiddenLayerSizes)}run(){this.training.create(this.config,this.shapeData),this.checkpointData&&(this.training.load(this.checkpointData),this.checkpointData=null,console.log("Load checkpoint"));const i=Date.now();let n=i,s=0,o=0,a=0,e=0,r=0,h=new t,c=new t;for(;;){if(o<this.config.totalSteps&&!this.playing){if(o<this.config.trainingStartSteps||o%this.config.trainingInterval!==0||a===this.config.trainingInterval){const t=this.training.step();e+=t.reward,t.done&&(r=e,e=0),a=0,o++,o%this.config.checkpointSteps===0&&(this.checkpointData=this.training.save())}else{const i=this.training.train();h.lossP+=i.lossP,h.lossV+=i.lossV,a++,a===this.config.trainingInterval&&(c=new t(h.lossP/this.config.trainingInterval,h.lossV/this.config.trainingInterval),h=new t)}s=Math.floor((Date.now()-i)/1e3)}const g=Date.now(),l=g-n;if(l>=this.frameTime){l>1e3?n=g:n+=this.frameTime;const t=this.training.evaluate(),i=this.fromNativeState(t);postMessage([o,r,c,s,i,this.checkpointData]),this.checkpointData=null}}}toNativeArray(t){const i=new this.training.IntArray;i.resize(t.length,0);for(let n=0;n<t.length;n++)i.set(n,t[n]);return i}fromNativeState(t){const i={goalPosition:[t.goalPosition.x,t.goalPosition.y,t.goalPosition.z],transforms:[]};for(let n=0;n<t.transforms.size();n++){const s=t.transforms.get(n);i.transforms.push({position:[s.position.x,s.position.y,s.position.z],orientation:[s.orientation.x,s.orientation.y,s.orientation.z,s.orientation.w]})}return i}};onmessage=t=>{const[n,s,o,a]=t.data;self.importScripts("training.js"),Training().then((t=>{new i(t,n,s,o,a).run()}))}})();
//# sourceMappingURL=Worker.worker.c6411d8a.worker.js.map