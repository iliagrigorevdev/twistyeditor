{"version":3,"file":"static/js/Worker.worker.c6411d8a.worker.js","mappings":"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","sources":["Trainer.js","Worker.worker.js"],"sourcesContent":["\nconst maxTime = 1000;\n\nclass Trainer {\n  constructor(training, config, shapeData, checkpointData, playing) {\n    this.training = training;\n    this.config = config;\n    this.shapeData = shapeData;\n    this.checkpointData = checkpointData;\n    this.playing = playing;\n\n    this.frameTime = Math.floor(config.timeStep * config.frameSteps * 1000 + 0.5);\n\n    this.config.hiddenLayerSizes = this.toNativeArray(this.config.hiddenLayerSizes);\n  }\n\n  run() {\n    this.training.create(this.config, this.shapeData);\n\n    if (this.checkpointData) {\n      this.training.load(this.checkpointData);\n      this.checkpointData = null;\n      console.log(\"Load checkpoint\");\n    }\n\n    const startTime = Date.now();\n    let lastTime = startTime;\n    let trainingTime = 0;\n    let stepNumber = 0;\n    let trainingNumber = 0;\n    let currentValue = 0;\n    let finalValue = 0;\n    let currentLosses = new ActorCriticLosses();\n    let finalLosses = new ActorCriticLosses();\n    while (true) {\n      if ((stepNumber < this.config.totalSteps) && !this.playing) {\n        if ((stepNumber < this.config.trainingStartSteps) ||\n            ((stepNumber % this.config.trainingInterval) !== 0) ||\n            (trainingNumber === this.config.trainingInterval)) {\n          const result = this.training.step();\n          currentValue += result.reward;\n          if (result.done) {\n            finalValue = currentValue;\n            currentValue = 0;\n          }\n          trainingNumber = 0;\n          stepNumber++;\n\n          if ((stepNumber % this.config.checkpointSteps) === 0) {\n            this.checkpointData = this.training.save();\n          }\n        } else {\n          const losses = this.training.train();\n          currentLosses.lossP += losses.lossP;\n          currentLosses.lossV += losses.lossV;\n          trainingNumber++;\n          if (trainingNumber === this.config.trainingInterval) {\n            finalLosses = new ActorCriticLosses(\n              currentLosses.lossP / this.config.trainingInterval,\n              currentLosses.lossV / this.config.trainingInterval\n            );\n            currentLosses = new ActorCriticLosses();\n          }\n        }\n\n        trainingTime = Math.floor((Date.now() - startTime) / 1000);\n      }\n\n      const currentTime = Date.now();\n      const elapsedTime = currentTime - lastTime;\n      if (elapsedTime >= this.frameTime) {\n        if (elapsedTime > maxTime) {\n          lastTime = currentTime;\n        } else {\n          lastTime += this.frameTime;\n        }\n        const nativeState = this.training.evaluate();\n        const state = this.fromNativeState(nativeState);\n        postMessage([stepNumber, finalValue, finalLosses, trainingTime, state, this.checkpointData]);\n        this.checkpointData = null;\n      }\n    }\n  }\n\n  toNativeArray(array) {\n    const nativeArray = new this.training.IntArray();\n    nativeArray.resize(array.length, 0);\n    for (let i = 0; i < array.length; i++) {\n      nativeArray.set(i, array[i]);\n    }\n    return nativeArray;\n  }\n\n  fromNativeState(nativeState) {\n    const state = {\n      goalPosition: [\n        nativeState.goalPosition.x,\n        nativeState.goalPosition.y,\n        nativeState.goalPosition.z\n      ],\n      transforms: []\n    };\n    for (let i = 0; i < nativeState.transforms.size(); i++) {\n      const transform = nativeState.transforms.get(i);\n      state.transforms.push({\n        position: [\n          transform.position.x,\n          transform.position.y,\n          transform.position.z\n        ],\n        orientation: [\n          transform.orientation.x,\n          transform.orientation.y,\n          transform.orientation.z,\n          transform.orientation.w\n        ]\n      });\n    }\n    return state;\n  }\n}\n\nclass ActorCriticLosses {\n  constructor(lossP = 0, lossV = 0) {\n    this.lossP = lossP;\n    this.lossV = lossV;\n  }\n}\n\nexport default Trainer;\nexport { ActorCriticLosses };\n","import Trainer from \"./Trainer\";\n\nonmessage = (e => {\n  const [config, shapeData, checkpointData, playing] = e.data;\n\n  self.importScripts(\"training.js\"); // eslint-disable-line\n\n  Training().then(training => { // eslint-disable-line\n    const trainer = new Trainer(training, config, shapeData, checkpointData, playing);\n    trainer.run();\n  });\n});\n"],"names":["ActorCriticLosses","constructor","lossP","arguments","length","undefined","lossV","this","training","config","shapeData","checkpointData","playing","frameTime","Math","floor","timeStep","frameSteps","hiddenLayerSizes","toNativeArray","run","create","load","console","log","startTime","Date","now","lastTime","trainingTime","stepNumber","trainingNumber","currentValue","finalValue","currentLosses","finalLosses","totalSteps","trainingStartSteps","trainingInterval","result","step","reward","done","checkpointSteps","save","losses","train","currentTime","elapsedTime","nativeState","evaluate","state","fromNativeState","postMessage","array","nativeArray","IntArray","resize","i","set","goalPosition","x","y","z","transforms","size","transform","get","push","position","orientation","w","onmessage","e","data","self","importScripts","Training","then","Trainer"],"sourceRoot":""}