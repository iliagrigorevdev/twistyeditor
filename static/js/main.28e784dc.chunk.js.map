{"version":3,"sources":["PrismView.js","ShapeView.js","Collision.js","Transform.js","Prism.js","Simulation.js","Viewport.js","ColorPicker.js","Toolbar.js","Shape.js","ShapeFolder.js","App.js","serviceWorker.js","index.js"],"names":["PrismView","prism","renderable","this","ShapeView","shape","viewport","prismViews","i","prisms","length","push","createPrismView","syncTransform","createPrismRenderable","colorMask","backgroundColor","foregroundColor","forEach","prismView","destroyRenderable","id","scene","addEntity","setRenderableTransform","worldPosition","worldOrientation","auxVec1","vec3","create","auxVec2","auxVec3","auxVec4","intersectTriangle","ray","p1","p2","p3","edge1","sub","edge2","pvec","cross","direction","det","dot","tvec","origin","u","qvec","v","intersectSphere","center","radius","rayorig","squaredRadius","squaredRayLength","squaredLength","a","b","d","sqrtD","Math","sqrt","t","projectVerticesOntoAxis","axis","vertices","dmin","dmax","overlapProjectionsOntoAxis","vertices1","vertices2","eps","rayToPointDistance","point","vector","projection","scale","distance","createTransform","position","orientation","quat","rotatedTransform","transform","pivot","angle","rotation","setAxisAngle","transformQuat","add","mul","normalize","multiplyTransforms","out","t1","t2","inverseTransform","invert","negate","PRISM_SIDE","PRISM_HALF_SIDE","PRISM_VERTICES","fromValues","PRISM_TRIANGLE_INDICES","PRISM_POLYGON_NORMALS","map","indices","p0","normal","PRISM_LEFT_SLOPE_PIVOT_POINT","PRISM_RIGHT_SLOPE_PIVOT_POINT","PRISM_LEFT_SLOPE_NORMAL","rotateZ","PI","PRISM_RIGHT_SLOPE_NORMAL","PRISM_LEFT_TRANSFORM","fromEuler","PRISM_RIGHT_TRANSFORM","PRISM_JUNCTIONS","swapColors","transforms","Prism","vertex","clone","polygonNormals","shapeOrientation","multiply","hitDistance","triangleHitDistance","undefined","intersectTriangles","polygonNormals1","polygonNormals2","every","polygonNormal1","polygonNormal2","junctions","junction","junctionPrisms","j","junctionTransform","copy","archive","RADIANS_TO_DEGREES","PRISM_MARGIN_DIAG","cos","PRISM_COLLISION_VERTICES","PRISM_MASS","PRISM_INERTIA_FACTOR","PRISM_INERTIA_X","PRISM_INERTIA_Y","PRISM_INERTIA_Z","convertVector","Ammo","btVector3","convertTransform","btTransform","quaternion","btQuaternion","convertQuaternion","Simulation","then","init","addGroundBody","addShapeBody","shapeBtTransform","shapeTransform","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","overlappingPairCache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","dynamicsWorld","btDiscreteDynamicsWorld","setGravity","prismCollisionShape","btConvexHullShape","setMargin","addPoint","recalcLocalAabb","prismMassOffset","prismMassOffsetInversed","collisionShape","mass","inertia","friction","restitution","group","mask","motionState","btDefaultMotionState","constructionInfo","btRigidBodyConstructionInfo","set_m_friction","set_m_restitution","rigidBody","btRigidBody","setActivationState","addRigidBody","groundShape","btStaticPlaneShape","shapeOrigin","tensor","mat3","mat1","mat2","basis","fromQuat","set","prismOrigin","px","py","pz","squaredDistance","multiplyScalar","principalRotation","fromMat3","mat","threshold","maxSteps","rot","step","p","q","r","max","abs","sin","mpq","theta","theta2","mrp","mrq","diagonalizeMatrix","childTransform","btCompoundShape","prismTransform","addChildShape","GROUP_GROUND","shapeBody","prismWorldTransforms","prismLocalTransforms","worldTransform","localTransform","console","log","toFixed","principalAxis","principalAngle","getAxisAngle","getMotionState","getWorldTransform","shapePosition","getOrigin","getRotation","x","y","z","w","deltaTime","stepSimulation","updatePrismTransforms","DEGREES_TO_RADIANS","ELEVATION_LIMIT","DEFAULT_ELEVATION","DEFAULT_HEADING","iblUrl","getPrismTextureUrl","maskIndex","colorToFloat3","color","rgb","tinycolor","toRgb","g","colorToFloat4","IDENTITY_QUAT","Viewport","props","auxMat4","mat4","assets","window","Filament","prevProps","mode","handleModeChange","handleShapeChange","refreshShapeView","Modes","SIMULATION","simulation","EDIT","engine","shapeView","destroy","addToScene","activePrismView","activePrism","selectPrism","elevation","heading","availableJunctions","focalLengthMin","focalLengthMax","cameraZoom","targetZoom","lastZoom","focalPoint","targetPosition","lastPosition","highlightColor","animationTimer","highlightTimer","pressing","dragging","pickedPrism","pickedJunction","activeJunctionPrism","pointerX","pointerY","canvas","filament","Engine","camera","createCamera","EntityManager","get","createScene","indirectLight","createIblFromKtx","setIntensity","setIndirectLight","prismSourceMaterial","createMaterial","prismSourceMesh","loadFilamesh","prismBoundingBox","getBoundingBox","ghostMaterial","ghostRenderable","buildPrismRenderable","getDefaultInstance","knobSourceMaterial","knobSourceMesh","knobBoundingBox","knobRenderables","prismTextures","createTextureFromPng","prismTextureSampler","TextureSampler","MinFilter","LINEAR_MIPMAP_LINEAR","MagFilter","LINEAR","WrapMode","CLAMP_TO_EDGE","ground","createGround","swapChain","createSwapChain","renderer","createRenderer","view","createView","setCamera","setScene","setClearOptions","clearColor","clear","resize","renderFrame","bind","addEventListener","requestAnimationFrame","e","handlePointerDown","handlePointerUp","handlePointerMove","halfSize","gridSize","vb","VertexBuffer","Builder","vertexCount","bufferCount","attribute","VertexAttribute","POSITION","VertexBuffer$AttributeType","FLOAT3","UV0","FLOAT2","build","setBufferAt","Float32Array","reps","ib","IndexBuffer","indexCount","bufferType","IndexBuffer$IndexType","USHORT","setBuffer","Uint16Array","material","texture","sampler","REPEAT","materialInstance","setTextureParameter","entity","RenderableManager","boundingBox","halfExtent","geometry","RenderableManager$PrimitiveType","TRIANGLES","vertexBuffer","indexBuffer","validColorMask","prismMaterial","createInstance","setColor3Parameter","RgbType","sRGB","setColor4Parameter","RgbaType","setFloatParameter","getRenderableMaterial","destroyMaterialInstance","destroyEntity","getRenderableManager","renderableManager","renderableInstance","getInstance","getAxisAlignedBoundingBox","delete","transformManager","getTransformManager","transformInstance","fromRotationTranslation","setTransform","getMaterialInstanceAt","eye","rotateX","rotateY","lookAt","fl","focalLength","fovY","atan","aspect","width","height","setProjectionFov","Camera$Fov","VERTICAL","timestamp","lastTime","min","k","lerp","updateCamera","highlightIntensity","HIGHLIGHT_OPAQUE_BLEND","setHighlightIntensity","render","dpr","devicePixelRatio","innerWidth","innerHeight","setViewport","pointerType","isPrimary","isPrimaryPointer","junctionIntersection","getCastingRay","clientX","clientY","prismIntersection","intersect","intersectJunctions","hitJunction","activatePrismKnob","hitPrism","addPrism","hideGhostPrism","showPrismKnobs","dx","dy","nearestJunctionPrism","pickNearestJunctionPrism","showGhostPrism","POINTER_DRAG_THRESHOLD","autoFovY","viewRotation","fromMat4","getViewMatrix","invAspect","aabb","transformMat3","widthFitFovY","heightFitFovY","autoZoom","tan","rayVec","vec4","transformMat4","Camera","inverseProjection","getProjectionMatrix","getModelMatrix","getPosition","junctionHitDistance","rayDistance","junctionPrism","prismRayDistance","animate","notify","findPrismView","updateHighlightColor","getAvailableJunctions","hidePrismKnobs","computeAutoZoom","onActivePrismChange","lastPrismId","applyTransform","onShapeChange","colorStr","readability","intensity","remove","createKnobRenderable","knobRenderable","activeJunction","junctionIndex","indexOf","className","ref","Component","ColorPicker","state","displayColorPicker","setState","onChange","hex","handleHideColorPicker","styles","reactCSS","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","zIndex","cover","top","right","bottom","left","style","onClick","handleToggleColorPicker","handleColorChange","Toolbar","prevShape","shapeModifier","prevPrism","prismModifier","modifyShape","findPrism","roll","parseFloat","pitch","yaw","modifyPrism","parseInt","filter","htmlFor","type","name","value","handleRollChange","target","handlePitchChange","handleYawChange","onShapeReset","onShapeShowcase","onShapeImport","onShapeExport","disabled","onSimulationStart","onSimulationStop","COLOR_MASK_COUNT","handleColorMaskChange","handleBackgroundColorChange","handleForegroundColorChange","handleSwapColors","handleDeletePrism","renderPrismParams","renderShapeParams","historyIndex","onHistoryChange","historyEntries","renderHistory","renderParams","Shape","getOrientation","zero","inverseOrientation","translation","translate","prismHitDistance","getJunctions","shapePrism","collides","toArchive","prismArchive","fromArchive","ShapeFolder","pieceCount","notation","tokens","split","token","pos","downwardPrismNumberStr","substring","index","twistsStr","twists","twist","ccw","twistAngle","twistPrism","rotations","shapeRotation","aa","rotate","figures","definition","definitions","find","skin","compileSkin","shapeFolder","pieces","colors","fold","applyRotations","startPos","charAt","delimPos","lastIndexOf","skinName","skinDefinition","skins","skinPattern","patterns","pattern","key","shapeColors","colorNumbers","prismColors","colorNumber","colorName","reverse","Object","freeze","App","createInitialShape","figureRandomIndices","figureIndex","addHistoryEntry","historyLength","historyStart","HISTORY_LENGTH_MAX","splice","reset","nextState","historyEntry","figureName","showFigure","fetch","response","json","data","Array","keys","sort","random","handleShapeShowcase","element","document","createElement","setAttribute","files","file","reader","FileReader","onload","archiveToShape","result","readAsText","click","prompt","content","shapeToArchive","Blob","href","URL","createObjectURL","download","body","appendChild","handleActivePrismChange","handleHistoryChange","handleShapeReset","handleShapeImport","handleShapeExport","handleSimulationStart","handleSimulationStop","JSON","stringify","version","text","parse","alert","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28e784dc.chunk.js","sourcesContent":["class PrismView {\n  constructor(prism, renderable) {\n    this.prism = prism;\n    this.renderable = renderable;\n  }\n}\n\nexport default PrismView;\n","import PrismView from './PrismView';\n\nclass ShapeView {\n  constructor(shape, viewport) {\n    this.shape = shape;\n\n    this.prismViews = [];\n    for (let i = 0; i < this.shape.prisms.length; i++) {\n      this.prismViews.push(this.createPrismView(this.shape.prisms[i], viewport));\n    }\n\n    this.syncTransform(viewport);\n  }\n\n  createPrismView(prism, viewport) {\n    const renderable = viewport.createPrismRenderable(prism.colorMask,\n        prism.backgroundColor, prism.foregroundColor);\n    return new PrismView(prism, renderable);\n  }\n\n  destroy(viewport) {\n    this.prismViews.forEach(prismView => viewport.destroyRenderable(prismView.renderable));\n    this.prismViews = null;\n  }\n\n  findPrismView(id) {\n    for (let i = 0; i < this.prismViews.length; i++) {\n      const prismView = this.prismViews[i];\n      if (prismView.prism.id === id) {\n        return prismView;\n      }\n    }\n    return null;\n  }\n\n  addToScene(viewport) {\n    this.prismViews.forEach((prismView) => viewport.scene.addEntity(prismView.renderable));\n  }\n\n  syncTransform(viewport) {\n    for (let i = 0; i < this.prismViews.length; i++) {\n      const prismView = this.prismViews[i];\n      const prism = prismView.prism;\n      viewport.setRenderableTransform(prismView.renderable, prism.worldPosition,\n          prism.worldOrientation);\n    }\n  }\n}\n\nexport default ShapeView;\n","import { vec3 } from 'gl-matrix';\n\nconst auxVec1 = vec3.create();\nconst auxVec2 = vec3.create();\nconst auxVec3 = vec3.create();\nconst auxVec4 = vec3.create();\n\nfunction intersectTriangles(ray, vertices, indices) {\n  let hitDistance;\n  for (let i = 0; i < indices.length; i += 3) {\n    const triangleHitDistance = intersectTriangle(ray,\n        vertices[indices[i]], vertices[indices[i + 1]], vertices[indices[i + 2]]);\n    if (triangleHitDistance !== undefined) {\n      if ((hitDistance === undefined) || (triangleHitDistance < hitDistance)) {\n        hitDistance = triangleHitDistance;\n      }\n    }\n  }\n  return hitDistance;\n}\n\nfunction intersectTriangle(ray, p1, p2, p3) {\n  const edge1 = vec3.sub(auxVec1, p2, p1);\n  const edge2 = vec3.sub(auxVec2, p3, p1);\n  const pvec = vec3.cross(auxVec3, ray.direction, edge2);\n  const det = vec3.dot(edge1, pvec);\n  if (det < 1e-6) {\n    return;\n  }\n  const tvec = vec3.sub(auxVec4, ray.origin, p1);\n  const u = vec3.dot(tvec, pvec);\n  if ((u < 0) || (u > det)) {\n    return;\n  }\n  const qvec = vec3.cross(auxVec4, tvec, edge1);\n  const v = vec3.dot(ray.direction, qvec);\n  if ((v < 0) || (u + v > det)) {\n    return;\n  }\n  return vec3.dot(edge2, qvec) / det;\n}\n\nfunction intersectSphere(ray, center, radius) {\n  const rayorig = vec3.sub(auxVec1, ray.origin, center);\n  const squaredRadius = radius * radius;\n  const squaredRayLength = vec3.squaredLength(rayorig);\n\n  if (squaredRayLength <= squaredRadius) {\n    return 0; // inside hit\n  }\n\n  const a = vec3.dot(ray.direction, ray.direction);\n  const b = 2 * vec3.dot(rayorig, ray.direction);\n  const c = squaredRayLength - squaredRadius;\n  const d = b * b - (4 * a * c);\n  if (d >= 0) {\n    const sqrtD = Math.sqrt(d);\n    let t = (-b - sqrtD) / (2 * a);\n    if (t < 0) {\n      t = (-b + sqrtD) / (2 * a);\n    }\n    return t; // nearest surface hit\n  }\n}\n\nfunction projectVerticesOntoAxis(axis, vertices) {\n  let dmin = 0;\n  let dmax = 0;\n  for (let i = 0; i < vertices.length; i++) {\n    const d = vec3.dot(axis, vertices[i]);\n    if (i === 0) {\n      dmin = d;\n      dmax = d;\n    } else {\n      if (d < dmin) {\n        dmin = d;\n      }\n      if (d > dmax) {\n        dmax = d;\n      }\n    }\n  }\n  return {\n    dmin: dmin,\n    dmax: dmax\n  };\n}\n\nfunction overlapProjectionsOntoAxis(axis, vertices1, vertices2, eps = 1e-3) {\n  if ((vertices1.length === 0) || (vertices2.length === 0)) {\n    return false;\n  }\n  let p1 = projectVerticesOntoAxis(axis, vertices1);\n  let p2 = projectVerticesOntoAxis(axis, vertices2);\n  return (p1.dmin + eps < p2.dmax) && (p2.dmin + eps < p1.dmax);\n}\n\nfunction collideConvexHulls(vertices1, polygonNormals1, vertices2, polygonNormals2) {\n  return polygonNormals1.every(polygonNormal1 =>\n          overlapProjectionsOntoAxis(polygonNormal1, vertices1, vertices2))\n      && polygonNormals2.every(polygonNormal2 =>\n          overlapProjectionsOntoAxis(polygonNormal2, vertices1, vertices2));\n}\n\nfunction rayToPointDistance(ray, point) {\n  const vector = vec3.sub(auxVec1, point, ray.origin);\n  const projection = vec3.scale(auxVec2, ray.direction, vec3.dot(vector, ray.direction));\n  return vec3.distance(vector, projection);\n}\n\nexport { intersectTriangles, intersectSphere, collideConvexHulls, rayToPointDistance };\n","import { vec3, quat } from 'gl-matrix';\n\nfunction createTransform(position = vec3.create(), orientation = quat.create()) {\n  return {\n    position: position,\n    orientation: orientation\n  };\n}\n\nfunction rotatedTransform(transform, pivot, axis, angle) {\n  const rotation = quat.setAxisAngle(quat.create(), axis, angle);\n  const position = vec3.sub(vec3.create(), transform.position, pivot);\n  vec3.transformQuat(position, position, rotation);\n  vec3.add(position, position, pivot);\n  const orientation = quat.mul(rotation, rotation, transform.orientation);\n  quat.normalize(orientation, orientation);\n  return createTransform(position, orientation);\n}\n\nfunction multiplyTransforms(out, t1, t2) {\n  vec3.transformQuat(out.position, t2.position, t1.orientation);\n  vec3.add(out.position, out.position, t1.position);\n  quat.mul(out.orientation, t1.orientation, t2.orientation);\n  quat.normalize(out.orientation, out.orientation);\n  return out;\n}\n\nfunction inverseTransform(out, t) {\n  quat.invert(out.orientation, t.orientation);\n  vec3.negate(out.position, t.position);\n  vec3.transformQuat(out.position, out.position, out.orientation);\n  return out;\n}\n\nexport { createTransform, rotatedTransform, multiplyTransforms, inverseTransform };\n","import { vec3, quat } from 'gl-matrix';\nimport { intersectTriangles, collideConvexHulls } from './Collision';\nimport { createTransform, rotatedTransform, multiplyTransforms } from './Transform';\n\nconst PRISM_HEIGHT = 1.0;\nconst PRISM_HALF_HEIGHT = 0.5 * PRISM_HEIGHT;\nconst PRISM_BASE = 2.0 * PRISM_HEIGHT;\nconst PRISM_HALF_BASE = 0.5 * PRISM_BASE;\nconst PRISM_SIDE = Math.sqrt(PRISM_BASE);\nconst PRISM_HALF_SIDE = 0.5 * PRISM_SIDE;\nconst PRISM_DISTANCE = 0.5 * PRISM_BASE;\nconst PRISM_HALF_DISTANCE = 0.5 * PRISM_DISTANCE;\n\n// Prism geometry\n//     2\n//     /\\\n//    /| \\\n//   / |  \\\n// 0/  /\\  \\4\n//  | /3 \\ |\n//  |/    \\|\n//  /______\\\n// 1        5\nconst PRISM_VERTICES = [\n  vec3.fromValues(-PRISM_HALF_BASE, -PRISM_HALF_HEIGHT, -PRISM_HALF_SIDE),\n  vec3.fromValues(-PRISM_HALF_BASE, -PRISM_HALF_HEIGHT, PRISM_HALF_SIDE),\n  vec3.fromValues(0.0, PRISM_HALF_HEIGHT, -PRISM_HALF_SIDE),\n  vec3.fromValues(0.0, PRISM_HALF_HEIGHT, PRISM_HALF_SIDE),\n  vec3.fromValues(PRISM_HALF_BASE, -PRISM_HALF_HEIGHT, -PRISM_HALF_SIDE),\n  vec3.fromValues(PRISM_HALF_BASE, -PRISM_HALF_HEIGHT, PRISM_HALF_SIDE)\n];\nconst PRISM_POLYGON_INDICES = [\n  [ 0, 1, 2, 3 ], // left slope\n  [ 2, 3, 5, 4 ], // right slope\n  [ 1, 0, 4, 5 ], // bottom\n  [ 0, 2, 4 ], // back\n  [ 5, 3, 1 ] // front\n];\nconst PRISM_TRIANGLE_INDICES = [\n  0, 1, 2,  2, 1, 3, // left slope\n  2, 3, 4,  4, 3, 5, // right slope\n  4, 5, 0,  0, 5, 1, // bottom\n  0, 2, 4, // back\n  5, 3, 1 // front\n];\nconst PRISM_POLYGON_NORMALS = PRISM_POLYGON_INDICES.map(indices => {\n  const p0 = PRISM_VERTICES[indices[0]];\n  const p1 = PRISM_VERTICES[indices[1]];\n  const p2 = PRISM_VERTICES[indices[2]];\n  const normal = vec3.sub(vec3.create(), p1, p0);\n  vec3.cross(normal, normal, vec3.sub(vec3.create(), p2, p0));\n  return vec3.normalize(normal, normal);\n});\n\nconst PRISM_LEFT_SLOPE_PIVOT_POINT = vec3.fromValues(-PRISM_HALF_DISTANCE, 0, 0);\nconst PRISM_RIGHT_SLOPE_PIVOT_POINT = vec3.fromValues(PRISM_HALF_DISTANCE, 0, 0);\nconst PRISM_SIDE_PIVOT_Y = -PRISM_HALF_HEIGHT / 6;\nconst PRISM_LEFT_SLOPE_NORMAL = vec3.rotateZ(vec3.create(), vec3.fromValues(0, 1, 0),\n    vec3.fromValues(0, 0, 0), 0.25 * Math.PI);\nconst PRISM_RIGHT_SLOPE_NORMAL = vec3.rotateZ(vec3.create(), vec3.fromValues(0, 1, 0),\n    vec3.fromValues(0, 0, 0), -0.25 * Math.PI);\nconst PRISM_LEFT_TRANSFORM = createTransform(vec3.fromValues(-PRISM_DISTANCE, 0, 0),\n    quat.fromEuler(quat.create(), -180, 0, 0));\nconst PRISM_RIGHT_TRANSFORM = createTransform(vec3.fromValues(PRISM_DISTANCE, 0, 0),\n    quat.fromEuler(quat.create(), 180, 0, 0));\nconst PRISM_JUNCTIONS = [\n  {\n    swapColors: true,\n    pivot: PRISM_LEFT_SLOPE_PIVOT_POINT,\n    normal: PRISM_LEFT_SLOPE_NORMAL,\n    transforms: [\n      PRISM_LEFT_TRANSFORM, // left 0\n      rotatedTransform(PRISM_LEFT_TRANSFORM, PRISM_LEFT_SLOPE_PIVOT_POINT,\n          PRISM_LEFT_SLOPE_NORMAL, 0.5 * Math.PI), // left 1\n      rotatedTransform(PRISM_LEFT_TRANSFORM, PRISM_LEFT_SLOPE_PIVOT_POINT,\n          PRISM_LEFT_SLOPE_NORMAL, Math.PI), // left 2\n      rotatedTransform(PRISM_LEFT_TRANSFORM, PRISM_LEFT_SLOPE_PIVOT_POINT,\n          PRISM_LEFT_SLOPE_NORMAL, -0.5 * Math.PI) // left 3\n    ]\n  },\n  {\n    swapColors: true,\n    pivot: PRISM_RIGHT_SLOPE_PIVOT_POINT,\n    normal: PRISM_RIGHT_SLOPE_NORMAL,\n    transforms: [\n      PRISM_RIGHT_TRANSFORM, // right 0\n      rotatedTransform(PRISM_RIGHT_TRANSFORM, PRISM_RIGHT_SLOPE_PIVOT_POINT,\n          PRISM_RIGHT_SLOPE_NORMAL, -0.5 * Math.PI), // right 1\n      rotatedTransform(PRISM_RIGHT_TRANSFORM, PRISM_RIGHT_SLOPE_PIVOT_POINT,\n          PRISM_RIGHT_SLOPE_NORMAL, Math.PI), // right 2\n      rotatedTransform(PRISM_RIGHT_TRANSFORM, PRISM_RIGHT_SLOPE_PIVOT_POINT,\n          PRISM_RIGHT_SLOPE_NORMAL, 0.5 * Math.PI) // right 3\n    ]\n  },\n  {\n    swapColors: false,\n    pivot: vec3.fromValues(0, PRISM_SIDE_PIVOT_Y, PRISM_HALF_SIDE),\n    normal: vec3.fromValues(0, 0, 1),\n    transforms: [\n      createTransform(vec3.fromValues(0, 0, PRISM_SIDE)) // front\n    ]\n  },\n  {\n    swapColors: false,\n    pivot: vec3.fromValues(0, PRISM_SIDE_PIVOT_Y, -PRISM_HALF_SIDE),\n    normal: vec3.fromValues(0, 0, -1),\n    transforms: [\n      createTransform(vec3.fromValues(0, 0, -PRISM_SIDE)) // back\n    ]\n  },\n  {\n    swapColors: false,\n    pivot: vec3.fromValues(0, -PRISM_HALF_HEIGHT, 0),\n    normal: vec3.fromValues(0, -1, 0),\n    transforms: [\n      createTransform(vec3.fromValues(0, -PRISM_HEIGHT, 0),\n          quat.fromEuler(quat.create(), 180, 0, 0)) // bottom\n    ]\n  }\n];\n\nclass Prism {\n  constructor() {\n    this.id = 0;\n    this.colorMask = 0;\n    this.backgroundColor = \"#000\";\n    this.foregroundColor = \"#fff\";\n    this.position = vec3.create();\n    this.orientation = quat.create();\n    this.worldPosition = vec3.create();\n    this.worldOrientation = quat.create();\n    this.vertices = PRISM_VERTICES.map(vertex => vec3.clone(vertex));\n    this.polygonNormals = PRISM_POLYGON_NORMALS.map(normal => vec3.clone(normal));\n  }\n\n  applyTransform(shapeOrientation) {\n    vec3.transformQuat(this.worldPosition, this.position, shapeOrientation);\n    quat.multiply(this.worldOrientation, shapeOrientation, this.orientation);\n    for (let i = 0; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i];\n      vec3.transformQuat(vertex, PRISM_VERTICES[i], this.worldOrientation);\n      vec3.add(vertex, vertex, this.worldPosition);\n    }\n    for (let i = 0; i < this.polygonNormals.length; i++) {\n      vec3.transformQuat(this.polygonNormals[i], PRISM_POLYGON_NORMALS[i], this.worldOrientation);\n    }\n  }\n\n  intersect(ray) {\n    return intersectTriangles(ray, this.vertices, PRISM_TRIANGLE_INDICES);\n  }\n\n  collides(prism) {\n    return collideConvexHulls(this.vertices, this.polygonNormals,\n        prism.vertices, prism.polygonNormals);\n  }\n\n  getJunctions() {\n    const junctions = [];\n    const transform = createTransform(this.position, this.orientation);\n    for (let i = 0; i < PRISM_JUNCTIONS.length; i++) {\n      const junction = PRISM_JUNCTIONS[i];\n      const junctionPrisms = [];\n      for (let j = 0; j < junction.transforms.length; j++) {\n        const junctionTransform = multiplyTransforms(createTransform(),\n            transform, junction.transforms[j]);\n        const prism = new Prism();\n        prism.colorMask = this.colorMask;\n        prism.backgroundColor = (junction.swapColors) ? this.foregroundColor : this.backgroundColor;\n        prism.foregroundColor = (junction.swapColors) ? this.backgroundColor : this.foregroundColor;\n        vec3.copy(prism.position, junctionTransform.position);\n        quat.copy(prism.orientation, junctionTransform.orientation);\n        junctionPrisms.push(prism);\n      }\n      const pivot = vec3.transformQuat(vec3.create(), junction.pivot, this.orientation);\n      vec3.add(pivot, pivot, this.position);\n      const normal = vec3.transformQuat(vec3.create(), junction.normal, this.orientation);\n      junctions.push({\n        pivot: pivot,\n        normal: normal,\n        prisms: junctionPrisms\n      });\n    }\n    return junctions;\n  }\n\n  toArchive() {\n    return {\n      id: this.id,\n      colorMask: this.colorMask,\n      backgroundColor: this.backgroundColor,\n      foregroundColor: this.foregroundColor,\n      position: this.position,\n      orientation: this.orientation\n    };\n  }\n\n  fromArchive(archive) {\n    this.id = archive.id;\n    this.colorMask = archive.colorMask;\n    this.backgroundColor = archive.backgroundColor;\n    this.foregroundColor = archive.foregroundColor;\n    vec3.copy(this.position, archive.position);\n    quat.copy(this.orientation, archive.orientation);\n  }\n\n  clone() {\n    const prism = new Prism();\n    prism.id = this.id;\n    prism.colorMask = this.colorMask;\n    prism.backgroundColor = this.backgroundColor;\n    prism.foregroundColor = this.foregroundColor;\n    vec3.copy(prism.position, this.position);\n    quat.copy(prism.orientation, this.orientation);\n    vec3.copy(prism.worldPosition, this.worldPosition);\n    quat.copy(prism.worldOrientation, this.worldOrientation);\n    return prism;\n  }\n}\n\nexport default Prism;\nexport { PRISM_HEIGHT, PRISM_BASE, PRISM_SIDE };\n","import Ammo from 'ammo.js';\nimport { vec3, quat, mat3 } from 'gl-matrix';\nimport { createTransform, multiplyTransforms, inverseTransform } from './Transform';\nimport { PRISM_HEIGHT, PRISM_BASE, PRISM_SIDE } from './Prism';\n\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\n\nconst MAX_SUB_STEPS = 10;\nconst FIXED_TIME_STEP = 1 / 60;\n\nconst GRAVITY = 9.81;\n\nconst PRISM_HALF_HEIGHT = 0.5 * PRISM_HEIGHT;\nconst PRISM_HALF_BASE = 0.5 * PRISM_BASE;\nconst PRISM_HALF_SIDE = 0.5 * PRISM_SIDE;\n\nconst PRISM_CG_H = 1 / 3 * PRISM_HEIGHT;\nconst PRISM_CG_DY = PRISM_HALF_HEIGHT - PRISM_CG_H;\nconst PRISM_MARGIN = 0.04;\nconst PRISM_MARGIN_DIAG = PRISM_MARGIN * Math.cos(Math.PI / 4);\n\nconst PRISM_COLLISION_VERTICES = [\n  vec3.fromValues(-PRISM_HALF_BASE + 2 * PRISM_MARGIN_DIAG + PRISM_MARGIN,\n      -PRISM_HALF_HEIGHT + PRISM_CG_DY + PRISM_MARGIN, -PRISM_HALF_SIDE + PRISM_MARGIN),\n  vec3.fromValues(-PRISM_HALF_BASE + 2 * PRISM_MARGIN_DIAG + PRISM_MARGIN,\n      -PRISM_HALF_HEIGHT + PRISM_CG_DY + PRISM_MARGIN, PRISM_HALF_SIDE - PRISM_MARGIN),\n  vec3.fromValues(0, PRISM_HALF_HEIGHT + PRISM_CG_DY - 2 * PRISM_MARGIN_DIAG,\n      -PRISM_HALF_SIDE + PRISM_MARGIN),\n  vec3.fromValues(0, PRISM_HALF_HEIGHT + PRISM_CG_DY - 2 * PRISM_MARGIN_DIAG,\n      PRISM_HALF_SIDE - PRISM_MARGIN),\n  vec3.fromValues(PRISM_HALF_BASE - 2 * PRISM_MARGIN_DIAG - PRISM_MARGIN,\n      -PRISM_HALF_HEIGHT + PRISM_CG_DY + PRISM_MARGIN, -PRISM_HALF_SIDE + PRISM_MARGIN),\n  vec3.fromValues(PRISM_HALF_BASE - 2 * PRISM_MARGIN_DIAG - PRISM_MARGIN,\n      -PRISM_HALF_HEIGHT + PRISM_CG_DY + PRISM_MARGIN, PRISM_HALF_SIDE - PRISM_MARGIN)\n];\n\nconst PRISM_VOLUME = 0.5 * PRISM_BASE * PRISM_HEIGHT * PRISM_SIDE;\nconst PRISM_DENSITY = 1 / Math.sqrt(2);\nconst PRISM_MASS = PRISM_VOLUME * PRISM_DENSITY;\nconst PRISM_INERTIA_FACTOR = PRISM_MASS * PRISM_HEIGHT * PRISM_HEIGHT;\nconst PRISM_INERTIA_X = 2 / 9 * PRISM_INERTIA_FACTOR;\nconst PRISM_INERTIA_Y = 1 / 3 * PRISM_INERTIA_FACTOR;\nconst PRISM_INERTIA_Z = 2 / 9 * PRISM_INERTIA_FACTOR;\n\nconst FRICTION_GROUND = 0.5;\nconst FRICTION_PRISM = 0.5;\nconst RESTITUTION_GROUND = 0.5;\nconst RESTITUTION_PRISM = 0.5;\nconst GROUP_GROUND = 0x01;\nconst GROUP_PRISM = 0x02;\nconst MASK_GROUND = GROUP_PRISM;\nconst MASK_PRISM = GROUP_GROUND | GROUP_PRISM;\n\nclass Simulation {\n  constructor(shape) {\n    this.shape = shape;\n\n    Ammo().then((Ammo) => {\n      this.init(Ammo);\n\n      this.addGroundBody(Ammo);\n      this.addShapeBody(Ammo, shape);\n    });\n  }\n\n  init(Ammo) {\n    this.shapeBtTransform = new Ammo.btTransform();\n    this.shapeTransform = createTransform();\n\n    this.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();\n    this.dispatcher = new Ammo.btCollisionDispatcher(this.collisionConfiguration);\n    this.overlappingPairCache = new Ammo.btDbvtBroadphase();\n    this.solver = new Ammo.btSequentialImpulseConstraintSolver();\n    this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(this.dispatcher,\n        this.overlappingPairCache, this.solver, this.collisionConfiguration);\n\n    this.dynamicsWorld.setGravity(new Ammo.btVector3(0, -GRAVITY, 0));\n\n    this.prismCollisionShape = new Ammo.btConvexHullShape();\n    this.prismCollisionShape.setMargin(PRISM_MARGIN);\n    for (const vertex of PRISM_COLLISION_VERTICES) {\n      this.prismCollisionShape.addPoint(convertVector(Ammo, vertex), false);\n    }\n    this.prismCollisionShape.recalcLocalAabb();\n\n    const prismMassOffset = createTransform(vec3.fromValues(0, PRISM_CG_DY, 0));\n    this.prismMassOffsetInversed = inverseTransform(createTransform(), prismMassOffset);\n  }\n\n  addRigidBody(Ammo, collisionShape, mass, inertia, transform,\n      friction, restitution, group, mask) {\n    const motionState = new Ammo.btDefaultMotionState(convertTransform(Ammo, transform));\n    const constructionInfo = new Ammo.btRigidBodyConstructionInfo(mass,\n        motionState, collisionShape, convertVector(Ammo, inertia));\n    constructionInfo.set_m_friction(friction);\n    constructionInfo.set_m_restitution(restitution);\n    const rigidBody = new Ammo.btRigidBody(constructionInfo);\n    rigidBody.setActivationState(4); // disable deactivation\n    this.dynamicsWorld.addRigidBody(rigidBody, group, mask);\n    return rigidBody;\n  }\n\n  addGroundBody(Ammo) {\n    const groundShape = new Ammo.btStaticPlaneShape(new Ammo.btVector3(0, 1, 0), 0);\n\n    this.addRigidBody(Ammo, groundShape, 0, vec3.create(), createTransform(),\n        FRICTION_GROUND, RESTITUTION_GROUND, GROUP_GROUND, MASK_GROUND);\n  }\n\n  addShapeBody(Ammo, shape) {\n    if (shape.prisms.length === 0) {\n      return;\n    }\n\n    const transforms = [];\n    const shapeOrigin = vec3.create();\n    for (const prism of shape.prisms) {\n      const transform = multiplyTransforms(createTransform(),\n          createTransform(prism.worldPosition, prism.worldOrientation),\n          this.prismMassOffsetInversed);\n      vec3.add(shapeOrigin, shapeOrigin, transform.position);\n      transforms.push(transform);\n    }\n    vec3.scale(shapeOrigin, shapeOrigin, 1 / shape.prisms.length);\n\n    const tensor = mat3.fromValues(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const mat1 = mat3.create();\n    const mat2 = mat3.create();\n    for (const transform of transforms) {\n      const basis = mat3.fromQuat(mat1, transform.orientation);\n      const j = mat3.set(mat2,\n        basis[0] * PRISM_INERTIA_X, basis[3] * PRISM_INERTIA_Y, basis[6] * PRISM_INERTIA_Z,\n        basis[1] * PRISM_INERTIA_X, basis[4] * PRISM_INERTIA_Y, basis[7] * PRISM_INERTIA_Z,\n        basis[2] * PRISM_INERTIA_X, basis[5] * PRISM_INERTIA_Y, basis[8] * PRISM_INERTIA_Z\n      );\n      mat3.mul(j, basis, j);\n      mat3.add(tensor, tensor, j);\n\n      const prismOrigin = transform.position;\n      const px = prismOrigin[0] - shapeOrigin[0];\n      const py = prismOrigin[1] - shapeOrigin[1];\n      const pz = prismOrigin[2] - shapeOrigin[2];\n      const squaredDistance = px * px + py * py + pz * pz;\n      mat3.set(j,\n        squaredDistance - px * px, -px * py, -px * pz,\n        -py * px, squaredDistance - py * py, -py * pz,\n        -pz * px, -pz * py, squaredDistance - pz * pz\n      );\n      mat3.multiplyScalar(j, j, PRISM_MASS);\n      mat3.add(tensor, tensor, j);\n    }\n    const principalRotation = quat.fromMat3(quat.create(),\n        diagonalizeMatrix(tensor, 1e-5, 20));\n    const shapeTransform = createTransform(shapeOrigin, principalRotation);\n    const inertia = vec3.fromValues(tensor[0], tensor[4], tensor[8]);\n\n    const childTransform = inverseTransform(createTransform(), shapeTransform);\n    const collisionShape = new Ammo.btCompoundShape();\n    for (const transform of transforms) {\n      const prismTransform = multiplyTransforms(createTransform(), childTransform, transform);\n      collisionShape.addChildShape(convertTransform(Ammo, prismTransform), this.prismCollisionShape);\n    }\n\n    const mass = shape.prisms.length * PRISM_MASS;\n    const rigidBody = this.addRigidBody(Ammo, collisionShape, mass,\n        inertia, shapeTransform, FRICTION_PRISM, RESTITUTION_PRISM,\n        GROUP_PRISM, MASK_PRISM);\n\n    this.shapeBody = rigidBody;\n    this.prismWorldTransforms = [];\n    this.prismLocalTransforms = [];\n    for (const prism of shape.prisms) {\n      const worldTransform = createTransform(vec3.clone(prism.worldPosition),\n          quat.clone(prism.worldOrientation));\n      const localTransform = multiplyTransforms(createTransform(),\n          childTransform, worldTransform);\n      this.prismWorldTransforms.push(worldTransform);\n      this.prismLocalTransforms.push(localTransform);\n    }\n\n    console.log(\"Mass: \" + mass);\n    console.log(\"Origin: {\" + shapeOrigin[0].toFixed(2) + \", \" + shapeOrigin[1].toFixed(2)\n        + \", \" + shapeOrigin[2].toFixed(2) + \"}\");\n    console.log(\"Inertia: {\" + inertia[0].toFixed(2) + \", \" + inertia[1].toFixed(2)\n        + \", \" + inertia[2].toFixed(2) + \"}\");\n    const principalAxis = vec3.create();\n    const principalAngle = quat.getAxisAngle(principalAxis, principalRotation);\n    console.log(\"Principal: axis={\" + principalAxis[0].toFixed(2) + \", \"\n        + principalAxis[1].toFixed(2) + \", \" + principalAxis[2].toFixed(2)\n        + \"} angle=\" + (principalAngle * RADIANS_TO_DEGREES).toFixed(0));\n  }\n\n  updatePrismTransforms() {\n    if (!this.shapeBody) {\n      return;\n    }\n\n    this.shapeBody.getMotionState().getWorldTransform(this.shapeBtTransform);\n    const shapePosition = this.shapeBtTransform.getOrigin();\n    const shapeOrientation = this.shapeBtTransform.getRotation();\n    vec3.set(this.shapeTransform.position, shapePosition.x(), shapePosition.y(), shapePosition.z());\n    quat.set(this.shapeTransform.orientation, shapeOrientation.x(), shapeOrientation.y(),\n        shapeOrientation.z(), shapeOrientation.w());\n\n    for (let i = 0; i < this.prismLocalTransforms.length; i++) {\n      multiplyTransforms(this.prismWorldTransforms[i], this.shapeTransform,\n          this.prismLocalTransforms[i]);\n    }\n  }\n\n  step(deltaTime) {\n    if (!this.dynamicsWorld) {\n      return;\n    }\n\n    this.dynamicsWorld.stepSimulation(deltaTime, MAX_SUB_STEPS, FIXED_TIME_STEP);\n\n    this.updatePrismTransforms();\n  }\n}\n\nfunction convertVector(Ammo, vector) {\n  return new Ammo.btVector3(vector[0], vector[1], vector[2]);\n}\n\nfunction convertQuaternion(Ammo, quaternion) {\n  return new Ammo.btQuaternion(quaternion[0], quaternion[1], quaternion[2], quaternion[3]);\n}\n\nfunction convertTransform(Ammo, transform) {\n  return new Ammo.btTransform(convertQuaternion(Ammo, transform.orientation),\n      convertVector(Ammo, transform.position));\n}\n\nfunction diagonalizeMatrix(mat, threshold, maxSteps) {\n  const rot = mat3.create();\n  for (let step = maxSteps; step > 0; step--) {\n    let p = 0;\n    let q = 1;\n    let r = 2;\n    let max = Math.abs(mat[3]);\n    let v = Math.abs(mat[6]);\n    if (v > max) {\n      q = 2;\n      r = 1;\n      max = v;\n    }\n    v = Math.abs(mat[7]);\n    if (v > max) {\n      p = 1;\n      q = 2;\n      r = 0;\n      max = v;\n    }\n\n    let t = threshold * (Math.abs(mat[0]) + Math.abs(mat[4]) + Math.abs(mat[8]));\n    if (max <= t) {\n      return rot;\n    }\n\n    const mpq = mat[p + q * 3];\n    const theta = (mat[q + q * 3] - mat[p + p * 3]) / (2 * mpq);\n    const theta2 = theta * theta;\n    let cos;\n    let sin;\n    t = (theta >= 0)\n        ? 1 / (theta + Math.sqrt(1 + theta2))\n        : 1 / (theta - Math.sqrt(1 + theta2));\n    cos = 1 / Math.sqrt(1 + t * t);\n    sin = cos * t;\n\n    mat[p + q * 3] = 0;\n    mat[q + p * 3] = 0;\n    mat[p + p * 3] -= t * mpq;\n    mat[q + q * 3] += t * mpq;\n    let mrp = mat[r + p * 3];\n    let mrq = mat[r + q * 3];\n    mat[r + p * 3] = mat[p + r * 3] = cos * mrp - sin * mrq;\n    mat[r + q * 3] = mat[q + r * 3] = cos * mrq + sin * mrp;\n\n    for (let i = 0; i < 3; i++) {\n      mrp = rot[i + p * 3];\n      mrq = rot[i + q * 3];\n      rot[i + p * 3] = cos * mrp - sin * mrq;\n      rot[i + q * 3] = cos * mrq + sin * mrp;\n    }\n  }\n  return rot;\n}\n\nexport default Simulation;\n","import React, { Component } from 'react';\nimport { vec3, vec4, quat, mat3, mat4 } from 'gl-matrix';\nimport ShapeView from './ShapeView';\nimport './App.css';\nimport tinycolor from 'tinycolor2';\nimport { intersectSphere, rayToPointDistance } from './Collision';\nimport { Modes } from './App';\nimport Simulation from './Simulation';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\n\nconst COLOR_MASK_COUNT = 8;\nconst POINTER_DRAG_THRESHOLD = 3;\nconst POINTER_DRAG_THRESHOLD_SQUARED = POINTER_DRAG_THRESHOLD * POINTER_DRAG_THRESHOLD;\nconst POINTER_DRAG_FACTOR = 0.01;\nconst ELEVATION_LIMIT = 0.48 * Math.PI;\nconst CAMERA_ANIMATION_TIME = 0.3;\nconst DEFAULT_ELEVATION = -Math.PI / 10;\nconst DEFAULT_HEADING = -Math.PI / 40;\n\nconst CAMERA_FOCAL_LENGTH_MIN = 15;\nconst CAMERA_FOCAL_LENGTH_MAX = 50;\nconst CAMERA_SENSOR_HEIGHT = 32;\nconst CAMERA_NEAR = 1;\nconst CAMERA_FAR = 300;\nconst CAMERA_DISTANCE = 10;\nconst SHAPE_FIT_SCALE = 1.1;\nfunction fovYToFocalLength(fovY) {\n  return 0.5 * CAMERA_SENSOR_HEIGHT / Math.tan(0.5 * fovY * DEGREES_TO_RADIANS);\n}\nfunction focalLengthToFovY(fl) {\n  return 2 * Math.atan(0.5 * CAMERA_SENSOR_HEIGHT / fl) * RADIANS_TO_DEGREES;\n}\n\nconst ENVIRONMENT_COLOR = \"#e6e6e6ff\";\nconst GROUND_HALF_SIZE = 1000;\nconst GROUND_GRID_SIZE = 4;\n\nconst HIGHLIGHT_PRIMARY_COLOR = \"#ffff40\";\nconst HIGHLIGHT_ALTERNATE_COLOR = \"#b266ff\";\nconst HIGHLIGHT_OPAQUE_BLEND = 0.8;\nconst HIGHLIGHT_START_BLEND = 0.3;\nconst HIGHLIGHT_RANGE_BLEND = HIGHLIGHT_OPAQUE_BLEND - HIGHLIGHT_START_BLEND;\nconst HIGHLIGHT_ANIMATION_TIME = 2;\n\nconst KNOB_RADIUS = 0.4;\nconst KNOB_IDLE_ALPHA = 0.3;\nconst KNOB_ACTIVE_ALPHA = 1.0;\n\nconst iblUrl = \"res/environment_ibl.ktx\";\nconst prismMeshUrl = \"res/prism.filamesh\";\nconst prismMaterialUrl = \"res/prism.filamat\";\nconst ghostMaterialUrl = \"res/ghost.filamat\";\nconst knobMeshUrl = \"res/knob.filamesh\";\nconst knobMaterialUrl = \"res/knob.filamat\";\nconst groundMaterialUrl = \"res/ground.filamat\";\nconst groundTextureUrl = \"res/ground.png\";\nconst getPrismTextureUrl = ((maskIndex) => \"res/prism\" + maskIndex + \".png\");\nconst colorToFloat3 = ((color) => {\n  const rgb = tinycolor(color).toRgb();\n  return [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n});\nconst colorToFloat4 = ((color) => {\n  const rgb = tinycolor(color).toRgb();\n  return [rgb.r / 255, rgb.g / 255, rgb.b / 255, rgb.a / 255];\n});\n\nconst IDENTITY_QUAT = quat.create();\n\nclass Viewport extends Component {\n  constructor(props) {\n    super(props);\n\n    this.auxMat4 = mat4.create();\n  }\n\n  componentDidMount() {\n    let assets = [iblUrl, prismMeshUrl, prismMaterialUrl,\n        ghostMaterialUrl, knobMeshUrl, knobMaterialUrl,\n        groundMaterialUrl, groundTextureUrl];\n    for (let i = 0; i < COLOR_MASK_COUNT; i++) {\n      assets.push(getPrismTextureUrl(i));\n    }\n    window.Filament.init(assets, () => {\n      this.init();\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.mode !== this.props.mode) {\n      this.handleModeChange();\n    } else if (prevProps.shape !== this.props.shape) {\n      this.handleShapeChange();\n    }\n  }\n\n  handleModeChange() {\n    this.refreshShapeView();\n    if (this.props.mode === Modes.SIMULATION) {\n      this.simulation = new Simulation(this.props.shape);\n    } else if (this.simulation) {\n      this.simulation = null;\n    }\n  }\n\n  handleShapeChange() {\n    if (this.props.mode === Modes.EDIT) {\n      this.refreshShapeView();\n    }\n  }\n\n  refreshShapeView() {\n    if (!this.engine) {\n      return;\n    }\n    if (this.shapeView) {\n      this.shapeView.destroy(this);\n    }\n    this.shapeView = new ShapeView(this.props.shape, this);\n    this.shapeView.addToScene(this);\n    this.activePrismView = null;\n    const activePrism = (this.props.mode === Modes.EDIT ? this.props.activePrism : null);\n    this.selectPrism(activePrism, true, false);\n  }\n\n  init() {\n    this.elevation = DEFAULT_ELEVATION;\n    this.heading = DEFAULT_HEADING;\n    this.activePrismView = null;\n    this.availableJunctions = null;\n    this.focalLengthMin = CAMERA_FOCAL_LENGTH_MIN;\n    this.focalLengthMax = CAMERA_FOCAL_LENGTH_MAX;\n    this.cameraZoom = 1;\n    this.targetZoom = this.cameraZoom;\n    this.lastZoom = this.cameraZoom;\n    this.focalPoint = vec3.create();\n    this.targetPosition = vec3.create();\n    this.lastPosition = vec3.create();\n    this.highlightColor = [0, 0, 0, 0];\n    this.animationTimer = 0;\n    this.highlightTimer = 0;\n\n    this.pressing = false;\n    this.dragging = false;\n    this.pickedPrism = null;\n    this.pickedJunction = null;\n    this.activeJunctionPrism = null;\n    this.pointerX = 0;\n    this.pointerY = 0;\n\n    this.canvas = this.filament;\n    const engine = this.engine = window.Filament.Engine.create(this.canvas);\n    this.camera = engine.createCamera(window.Filament.EntityManager.get().create());\n    this.scene = engine.createScene();\n\n    const indirectLight = engine.createIblFromKtx(iblUrl);\n    indirectLight.setIntensity(50000);\n    this.scene.setIndirectLight(indirectLight);\n\n    this.prismSourceMaterial = engine.createMaterial(prismMaterialUrl);\n    this.prismSourceMesh = engine.loadFilamesh(prismMeshUrl);\n    this.prismBoundingBox = this.getBoundingBox(this.prismSourceMesh.renderable);\n\n    const ghostMaterial = engine.createMaterial(ghostMaterialUrl);\n    this.ghostRenderable = this.buildPrismRenderable(ghostMaterial.getDefaultInstance());\n\n    this.knobSourceMaterial = engine.createMaterial(knobMaterialUrl);\n    this.knobSourceMesh = engine.loadFilamesh(knobMeshUrl);\n    this.knobBoundingBox = this.getBoundingBox(this.knobSourceMesh.renderable);\n    this.knobRenderables = [];\n\n    this.prismTextures = [];\n    for (let i = 0; i < COLOR_MASK_COUNT; i++) {\n      this.prismTextures.push(engine.createTextureFromPng(getPrismTextureUrl(i)));\n    }\n    this.prismTextureSampler = new window.Filament.TextureSampler(\n        window.Filament.MinFilter.LINEAR_MIPMAP_LINEAR,\n        window.Filament.MagFilter.LINEAR,\n        window.Filament.WrapMode.CLAMP_TO_EDGE);\n\n    const ground = this.createGround(GROUND_HALF_SIZE, GROUND_GRID_SIZE);\n    this.scene.addEntity(ground);\n\n    this.handleShapeChange();\n\n    this.swapChain = engine.createSwapChain();\n    this.renderer = engine.createRenderer();\n    this.view = engine.createView();\n    this.view.setCamera(this.camera);\n    this.view.setScene(this.scene);\n    this.renderer.setClearOptions({ clearColor: colorToFloat4(ENVIRONMENT_COLOR), clear: true });\n\n    this.resize();\n    this.renderFrame = this.renderFrame.bind(this);\n    this.resize = this.resize.bind(this);\n    window.addEventListener(\"resize\", this.resize);\n    window.requestAnimationFrame(this.renderFrame);\n    this.canvas.addEventListener(\"pointerdown\", (e) => this.handlePointerDown(e));\n    this.canvas.addEventListener(\"pointerup\", (e) => this.handlePointerUp(e));\n    this.canvas.addEventListener(\"pointermove\", (e) => this.handlePointerMove(e));\n  }\n\n  createGround(halfSize, gridSize) {\n    const vb = window.Filament.VertexBuffer.Builder()\n      .vertexCount(4)\n      .bufferCount(2)\n      .attribute(window.Filament.VertexAttribute.POSITION, 0,\n          window.Filament.VertexBuffer$AttributeType.FLOAT3, 0, 12)\n      .attribute(window.Filament.VertexAttribute.UV0, 1,\n          window.Filament.VertexBuffer$AttributeType.FLOAT2, 0, 8)\n      .build(this.engine);\n    vb.setBufferAt(this.engine, 0, new Float32Array([\n      -halfSize, 0, -halfSize,\n      -halfSize, 0, halfSize,\n      halfSize, 0, -halfSize,\n      halfSize, 0, halfSize\n    ]));\n    const reps = 2 * halfSize / gridSize;\n    vb.setBufferAt(this.engine, 1, new Float32Array([0, 0, 0, reps, reps, 0, reps, reps]));\n\n    const ib = window.Filament.IndexBuffer.Builder()\n      .indexCount(6)\n      .bufferType(window.Filament.IndexBuffer$IndexType.USHORT)\n      .build(this.engine);\n    ib.setBuffer(this.engine, new Uint16Array([0, 1, 2, 2, 1, 3]));\n\n    const material = this.engine.createMaterial(groundMaterialUrl);\n    const texture = this.engine.createTextureFromPng(groundTextureUrl);\n    const sampler = new window.Filament.TextureSampler(\n        window.Filament.MinFilter.LINEAR_MIPMAP_LINEAR,\n        window.Filament.MagFilter.LINEAR,\n        window.Filament.WrapMode.REPEAT);\n    const materialInstance = material.getDefaultInstance();\n    materialInstance.setTextureParameter(\"baseColor\", texture, sampler);\n\n    const entity = window.Filament.EntityManager.get()\n      .create();\n    window.Filament.RenderableManager.Builder(1)\n      .boundingBox({ center: [0, 0, 0], halfExtent: [halfSize, 0, halfSize] })\n      .material(0, materialInstance)\n      .geometry(0, window.Filament.RenderableManager$PrimitiveType.TRIANGLES, vb, ib)\n      .build(this.engine, entity);\n    return entity;\n  }\n\n  buildPrismRenderable(material) {\n    const renderable = window.Filament.EntityManager.get()\n      .create();\n    window.Filament.RenderableManager.Builder(1)\n      .boundingBox(this.prismBoundingBox)\n      .material(0, material)\n      .geometry(0, window.Filament.RenderableManager$PrimitiveType.TRIANGLES,\n          this.prismSourceMesh.vertexBuffer, this.prismSourceMesh.indexBuffer)\n      .build(this.engine, renderable);\n    return renderable;\n  }\n\n  createPrismRenderable(colorMask, backgroundColor, foregroundColor) {\n    const validColorMask = (colorMask >= 0) && (colorMask < COLOR_MASK_COUNT)\n        ? colorMask : 0;\n    const prismMaterial = this.prismSourceMaterial.createInstance();\n    prismMaterial.setTextureParameter(\"colorMask\",\n        this.prismTextures[validColorMask], this.prismTextureSampler);\n    prismMaterial.setColor3Parameter(\"backgroundColor\",\n        window.Filament.RgbType.sRGB, colorToFloat3(backgroundColor));\n    prismMaterial.setColor3Parameter(\"foregroundColor\",\n        window.Filament.RgbType.sRGB, colorToFloat3(foregroundColor));\n    prismMaterial.setColor4Parameter(\"highlightColor\",\n        window.Filament.RgbaType.sRGB, [0, 0, 0, 0]);\n    return this.buildPrismRenderable(prismMaterial);\n  }\n\n  createKnobRenderable() {\n    const material = this.knobSourceMaterial.createInstance();\n    material.setFloatParameter(\"alpha\", 0);\n\n    const renderable = window.Filament.EntityManager.get()\n      .create();\n    window.Filament.RenderableManager.Builder(1)\n      .boundingBox(this.knobBoundingBox)\n      .material(0, material)\n      .geometry(0, window.Filament.RenderableManager$PrimitiveType.TRIANGLES,\n          this.knobSourceMesh.vertexBuffer, this.knobSourceMesh.indexBuffer)\n      .build(this.engine, renderable);\n    return renderable;\n  }\n\n  destroyRenderable(renderable) {\n    const material = this.getRenderableMaterial(renderable);\n    this.engine.destroyMaterialInstance(material);\n    this.engine.destroyEntity(renderable);\n    const renderableManager = this.engine.getRenderableManager();\n    renderableManager.destroy(renderable);\n  }\n\n  getBoundingBox(renderable) {\n    const renderableManager = this.engine.getRenderableManager();\n    const renderableInstance = renderableManager.getInstance(renderable);\n    const boundingBox = renderableManager.getAxisAlignedBoundingBox(renderableInstance);\n    renderableInstance.delete();\n    return boundingBox;\n  }\n\n  setRenderableTransform(renderable, position, orientation) {\n    const transformManager = this.engine.getTransformManager();\n    const transformInstance = transformManager.getInstance(renderable);\n    const transform = mat4.fromRotationTranslation(this.auxMat4, orientation, position);\n    transformManager.setTransform(transformInstance, transform);\n    transformInstance.delete();\n  }\n\n  getRenderableMaterial(renderable) {\n    const renderableManager = this.engine.getRenderableManager();\n    const renderableInstance = renderableManager.getInstance(renderable);\n    const material = renderableManager.getMaterialInstanceAt(renderableInstance, 0);\n    renderableInstance.delete();\n    return material;\n  }\n\n  updateCamera() {\n    const eye = [this.focalPoint[0], this.focalPoint[1], this.focalPoint[2] + CAMERA_DISTANCE];\n    const up = [0, 1, 0];\n    vec3.rotateX(eye, eye, this.focalPoint, this.elevation);\n    vec3.rotateY(eye, eye, this.focalPoint, this.heading);\n    this.camera.lookAt(eye, this.focalPoint, up);\n\n    const focalLength = this.focalLengthMin * (1 - this.cameraZoom)\n        + this.focalLengthMax * this.cameraZoom;\n    const fovY = focalLengthToFovY(focalLength);\n    const aspect = this.canvas.width / this.canvas.height;\n    this.camera.setProjectionFov(fovY, aspect, CAMERA_NEAR, CAMERA_FAR,\n        window.Filament.Camera$Fov.VERTICAL);\n  }\n\n  renderFrame(timestamp) {\n    if (this.lastTime === undefined) {\n      this.lastTime = timestamp;\n    }\n    const deltaTime = 1e-3 * (timestamp - this.lastTime);\n    this.lastTime = timestamp;\n\n    if (this.animationTimer < CAMERA_ANIMATION_TIME) {\n      this.animationTimer += deltaTime;\n      const t = Math.min(this.animationTimer / CAMERA_ANIMATION_TIME, 1);\n      const k = t * t * (3 - 2 * t);\n      vec3.lerp(this.focalPoint, this.lastPosition, this.targetPosition, k);\n      this.cameraZoom = this.lastZoom * (1 - k) + this.targetZoom * k;\n      this.updateCamera();\n    }\n\n    if (this.activePrismView) {\n      this.highlightTimer += deltaTime;\n      if (this.highlightTimer > HIGHLIGHT_ANIMATION_TIME) {\n        this.highlightTimer %= HIGHLIGHT_ANIMATION_TIME;\n      }\n      const t = 2 * Math.abs(this.highlightTimer / HIGHLIGHT_ANIMATION_TIME - 0.5);\n      const k = t * t * (3 - 2 * t);\n      const highlightIntensity = HIGHLIGHT_START_BLEND + k * HIGHLIGHT_RANGE_BLEND;\n      this.setHighlightIntensity(this.activePrismView, highlightIntensity);\n    }\n\n    if (this.props.mode === Modes.SIMULATION) {\n      this.simulation.step(deltaTime);\n      const transforms = this.simulation.prismWorldTransforms;\n      if (transforms && (transforms.length === this.shapeView.prismViews.length)) {\n        for (let i = 0; i < this.shapeView.prismViews.length; i++) {\n          const prismView = this.shapeView.prismViews[i];\n          const transform = transforms[i];\n          this.setRenderableTransform(prismView.renderable, transform.position,\n              transform.orientation);\n        }\n      }\n    }\n\n    this.renderer.render(this.swapChain, this.view);\n    window.requestAnimationFrame(this.renderFrame);\n  }\n\n  resize() {\n    const dpr = window.devicePixelRatio;\n    const width = this.canvas.width = 0.8 * window.innerWidth * dpr;\n    const height = this.canvas.height = window.innerHeight * dpr;\n    this.view.setViewport([0, 0, width, height]);\n    this.focalLengthMin = CAMERA_FOCAL_LENGTH_MIN;\n    this.focalLengthMax = CAMERA_FOCAL_LENGTH_MAX;\n    if (width < height) {\n      const aspect = width / height;\n      this.focalLengthMin *= aspect;\n      this.focalLengthMax *= aspect;\n    }\n\n    this.updateCamera();\n  }\n\n  isPrimaryPointer(e) {\n    return (e.pointerType !== \"touch\") || e.isPrimary;\n  }\n\n  handlePointerDown(e) {\n    if (!this.isPrimaryPointer(e)) {\n      return;\n    }\n\n    this.pickedPrism = null;\n    this.pickedJunction = null;\n    this.activeJunctionPrism = null;\n\n    if (this.props.mode === Modes.EDIT) {\n      const ray = this.getCastingRay(e.clientX, e.clientY);\n      const prismIntersection = this.shapeView.shape.intersect(ray);\n      let junctionIntersection;\n      if (this.props.activePrism) {\n        junctionIntersection = this.intersectJunctions(ray);\n      }\n      if (junctionIntersection && (!prismIntersection\n          || (junctionIntersection.hitDistance < prismIntersection.hitDistance))) {\n        this.pickedJunction = junctionIntersection.hitJunction;\n        this.activatePrismKnob(this.availableJunctions, this.pickedJunction);\n      } else {\n        this.pickedPrism = (prismIntersection) ? prismIntersection.hitPrism : null;\n      }\n    }\n\n    this.pressing = true;\n    this.dragging = false;\n    this.pointerX = e.clientX;\n    this.pointerY = e.clientY;\n  }\n\n  handlePointerUp(e) {\n    if (!this.isPrimaryPointer(e)) {\n      return;\n    }\n\n    if (this.props.mode === Modes.EDIT) {\n      if (this.activeJunctionPrism) {\n        this.addPrism(this.activeJunctionPrism);\n      } else if (!this.dragging && !this.pickedJunction) {\n        this.selectPrism(this.pickedPrism, true, true);\n      }\n      this.hideGhostPrism();\n      if (this.availableJunctions) {\n        this.showPrismKnobs(this.availableJunctions);\n      }\n    }\n\n    this.pressing = false;\n  }\n\n  handlePointerMove(e) {\n    if (!this.isPrimaryPointer(e) || !this.pressing) {\n      return;\n    }\n    const dx = e.clientX - this.pointerX;\n    const dy = e.clientY - this.pointerY;\n    if (this.dragging) {\n      if (this.pickedJunction) {\n        const ray = this.getCastingRay(e.clientX, e.clientY);\n        const nearestJunctionPrism = this.pickNearestJunctionPrism(ray, this.pickedJunction);\n        if (nearestJunctionPrism !== this.activeJunctionPrism) {\n          this.showGhostPrism(nearestJunctionPrism.worldPosition, nearestJunctionPrism.worldOrientation);\n          this.activeJunctionPrism = nearestJunctionPrism;\n        }\n      } else {\n        this.elevation = Math.min(Math.max(\n            this.elevation - dy * POINTER_DRAG_FACTOR, -ELEVATION_LIMIT), ELEVATION_LIMIT);\n        this.heading = (this.heading - dx * POINTER_DRAG_FACTOR) % (2 * Math.PI);\n        this.updateCamera();\n        this.pointerX = e.clientX;\n        this.pointerY = e.clientY;\n      }\n    } else {\n      const dragDistanceSquared = dx * dx + dy * dy;\n      if (dragDistanceSquared >= POINTER_DRAG_THRESHOLD_SQUARED) {\n        this.pointerX = e.clientX;\n        this.pointerY = e.clientY;\n        this.dragging = true;\n      }\n    }\n  }\n\n  computeAutoZoom(shape) {\n    let autoFovY = 0;\n    const point = vec3.create();\n    const viewRotation = mat3.fromMat4(mat3.create(), this.camera.getViewMatrix());\n    const invAspect = this.canvas.height / this.canvas.width;\n    for (const prism of shape.prisms) {\n      for (const vertex of prism.vertices) {\n        vec3.sub(point, vertex, shape.aabb.center);\n        vec3.transformMat3(point, point, viewRotation);\n        const widthFitFovY = 2 * Math.atan(SHAPE_FIT_SCALE * invAspect\n            * Math.abs(point[0]) / (CAMERA_DISTANCE - point[2])) * RADIANS_TO_DEGREES;\n        if (widthFitFovY > autoFovY) {\n          autoFovY = widthFitFovY;\n        }\n        const heightFitFovY = 2 * Math.atan(SHAPE_FIT_SCALE * Math.abs(point[1])\n            / (CAMERA_DISTANCE - point[2])) * RADIANS_TO_DEGREES;\n        if (heightFitFovY > autoFovY) {\n          autoFovY = heightFitFovY;\n        }\n      }\n    }\n    if (autoFovY > 0) {\n      const autoFocalLength = fovYToFocalLength(autoFovY);\n      const autoZoom = (autoFocalLength - this.focalLengthMin)\n          / (this.focalLengthMax - this.focalLengthMin);\n      return Math.min(Math.max(autoZoom, 0), 1);\n    } else {\n      return 1;\n    }\n  }\n\n  getCastingRay(clientX, clientY) {\n    const dpr = window.devicePixelRatio;\n    const x = (2 * clientX * dpr) / this.canvas.width - 1;\n    const y = 1 - (2 * clientY * dpr) / this.canvas.height;\n    const rayVec = vec4.fromValues(x, y, -1, 1);\n    vec4.transformMat4(rayVec, rayVec, window.Filament.Camera.inverseProjection(\n        this.camera.getProjectionMatrix()));\n    rayVec[2] = -1;\n    rayVec[3] = 0;\n    vec4.transformMat4(rayVec, rayVec, this.camera.getModelMatrix());\n    const direction = vec3.fromValues(rayVec[0], rayVec[1], rayVec[2]);\n    vec3.normalize(direction, direction);\n    return {\n      origin: this.camera.getPosition(),\n      direction: direction\n    };\n  }\n\n  intersectJunctions(ray) {\n    if (!this.availableJunctions) {\n      return;\n    }\n    let hitJunction;\n    let hitDistance;\n    for (let i = 0; i < this.availableJunctions.length; i++) {\n      const junction = this.availableJunctions[i];\n      const junctionHitDistance = intersectSphere(ray, junction.pivot, KNOB_RADIUS);\n      if (junctionHitDistance !== undefined) {\n        if ((hitDistance === undefined) || (junctionHitDistance < hitDistance)) {\n          hitJunction = junction;\n          hitDistance = junctionHitDistance;\n        }\n      }\n    }\n    if (!hitJunction) {\n      return;\n    }\n    return {\n      hitJunction: hitJunction,\n      hitDistance: hitDistance\n    };\n  }\n\n  pickNearestJunctionPrism(ray, junction) {\n    let junctionPrism = null;\n    let rayDistance;\n    for (let i = 0; i < junction.prisms.length; i++) {\n      const prism = junction.prisms[i];\n      const prismRayDistance = rayToPointDistance(ray, prism.worldPosition);\n      if ((rayDistance === undefined) || (prismRayDistance < rayDistance)) {\n        junctionPrism = prism;\n        rayDistance = prismRayDistance;\n      }\n    }\n    return junctionPrism;\n  }\n\n  selectPrism(prism, animate, notify) {\n    if (this.activePrismView) {\n      this.setHighlightIntensity(this.activePrismView, 0);\n    }\n    if (prism) {\n      this.activePrismView = this.shapeView.findPrismView(prism.id);\n    } else {\n      this.activePrismView = null;\n    }\n    if (this.activePrismView) {\n      this.updateHighlightColor(prism);\n      this.availableJunctions = this.shapeView.shape.getAvailableJunctions(prism);\n      this.showPrismKnobs(this.availableJunctions);\n    } else {\n      this.availableJunctions = null;\n      this.hidePrismKnobs();\n    }\n    if (animate) {\n      vec3.copy(this.lastPosition, this.targetPosition);\n      this.lastZoom = this.targetZoom;\n      if (this.activePrismView) {\n        vec3.copy(this.targetPosition, prism.worldPosition);\n        this.targetZoom = 1;\n      } else {\n        vec3.copy(this.targetPosition, this.shapeView.shape.aabb.center);\n        this.targetZoom = this.computeAutoZoom(this.shapeView.shape);\n      }\n      this.animationTimer = 0;\n      this.highlightTimer = 0;\n    }\n    if (notify) {\n      this.props.onActivePrismChange(prism);\n    }\n  }\n\n  addPrism(prism) {\n    const shape = this.shapeView.shape.clone();\n    prism.id = ++shape.lastPrismId;\n    shape.prisms.push(prism);\n    shape.applyTransform();\n    this.selectPrism(prism, false, true);\n    this.props.onShapeChange(shape);\n  }\n\n  updateHighlightColor(prism) {\n    const primaryReadability = tinycolor.readability(prism.backgroundColor, HIGHLIGHT_PRIMARY_COLOR);\n    const alternateReadability = tinycolor.readability(prism.backgroundColor, HIGHLIGHT_ALTERNATE_COLOR);\n    const colorStr = (primaryReadability > alternateReadability)\n        ? HIGHLIGHT_PRIMARY_COLOR : HIGHLIGHT_ALTERNATE_COLOR;\n    const rgb = tinycolor(colorStr).toRgb();\n    this.highlightColor[0] = rgb.r / 255;\n    this.highlightColor[1] = rgb.g / 255;\n    this.highlightColor[2] = rgb.b / 255;\n  }\n\n  setHighlightIntensity(prismView, intensity) {\n    const prismMaterial = this.getRenderableMaterial(prismView.renderable);\n    this.highlightColor[3] = intensity;\n    prismMaterial.setColor4Parameter(\"highlightColor\", window.Filament.RgbaType.sRGB, this.highlightColor);\n  }\n\n  showGhostPrism(position, orientation) {\n    this.setRenderableTransform(this.ghostRenderable, position, orientation);\n    this.scene.addEntity(this.ghostRenderable);\n  }\n\n  hideGhostPrism() {\n    this.scene.remove(this.ghostRenderable);\n  }\n\n  showPrismKnobs(junctions) {\n    while (this.knobRenderables.length < junctions.length) {\n      this.knobRenderables.push(this.createKnobRenderable());\n    }\n    for (let i = 0; i < junctions.length; i++) {\n      const junction = junctions[i];\n      const knobRenderable = this.knobRenderables[i];\n      const knobMaterial = this.getRenderableMaterial(knobRenderable);\n      knobMaterial.setFloatParameter(\"alpha\", KNOB_IDLE_ALPHA);\n      this.setRenderableTransform(knobRenderable, junction.pivot, IDENTITY_QUAT);\n      this.scene.addEntity(knobRenderable);\n    }\n    for (let i = junctions.length; i < this.knobRenderables.length; i++) {\n      const knobRenderable = this.knobRenderables[i];\n      this.scene.remove(knobRenderable)\n    }\n  }\n\n  activatePrismKnob(junctions, activeJunction) {\n    const junctionIndex = junctions.indexOf(activeJunction);\n    const knobRenderable = this.knobRenderables[junctionIndex];\n    const knobMaterial = this.getRenderableMaterial(knobRenderable);\n    knobMaterial.setFloatParameter(\"alpha\", KNOB_ACTIVE_ALPHA);\n    this.hidePrismKnobs();\n    this.scene.addEntity(knobRenderable);\n  }\n\n  hidePrismKnobs() {\n    this.knobRenderables.forEach(knobRenderable => this.scene.remove(knobRenderable));\n  }\n\n  render() {\n    return <canvas className=\"Viewport\" ref={ref => (this.filament = ref)} />\n  }\n}\n\nexport default Viewport;\nexport { COLOR_MASK_COUNT };\n","import React, { Component } from 'react'\nimport reactCSS from 'reactcss'\nimport { SwatchesPicker } from 'react-color'\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displayColorPicker: false\n    };\n  }\n\n  handleToggleColorPicker() {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n\n  handleHideColorPicker() {\n    this.setState({ displayColorPicker: false })\n  };\n\n  handleColorChange(color) {\n    this.props.onChange(color.hex);\n    this.handleHideColorPicker();\n  };\n\n  render() {\n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: this.props.color,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    return (\n      <div>\n        <div style={styles.swatch} onClick={() => this.handleToggleColorPicker()}>\n          <div style={styles.color} />\n        </div>\n        {\n          this.state.displayColorPicker\n          ?\n          <div style={styles.popover}>\n            <div style={styles.cover} onClick={() => this.handleHideColorPicker()} />\n            <SwatchesPicker color={this.props.color} width=\"220px\" height=\"220px\"\n              onChange={(color) => this.handleColorChange(color)} />\n          </div>\n          :\n          null\n        }\n      </div>\n    );\n  }\n}\n\nexport default ColorPicker;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { COLOR_MASK_COUNT } from './Viewport';\nimport ColorPicker from './ColorPicker';\nimport { Modes } from './App';\n\nclass Toolbar extends Component {\n  modifyShape(prevShape, shapeModifier) {\n    const shape = prevShape.clone();\n    shapeModifier(shape);\n    shape.applyTransform();\n    this.props.onShapeChange(shape);\n  }\n\n  modifyPrism(prevShape, prevPrism, prismModifier) {\n    this.modifyShape(prevShape, (shape) => {\n      const prism = shape.findPrism(prevPrism.id);\n      prismModifier(prism);\n    });\n  }\n\n  handleRollChange(prevShape, roll) {\n    this.modifyShape(prevShape, (shape) => shape.roll = parseFloat(roll) || 0);\n  }\n\n  handlePitchChange(prevShape, pitch) {\n    this.modifyShape(prevShape, (shape) => shape.pitch = parseFloat(pitch) || 0);\n  }\n\n  handleYawChange(prevShape, yaw) {\n    this.modifyShape(prevShape, (shape) => shape.yaw = parseFloat(yaw) || 0);\n  }\n\n  handleColorMaskChange(prevShape, prevPrism, colorMask) {\n    this.modifyPrism(prevShape, prevPrism,\n        (prism) => prism.colorMask = parseInt(colorMask) || 0);\n  }\n\n  handleBackgroundColorChange(prevShape, prevPrism, color) {\n    this.modifyPrism(prevShape, prevPrism,\n        (prism) => prism.backgroundColor = color);\n  }\n\n  handleForegroundColorChange(prevShape, prevPrism, color) {\n    this.modifyPrism(prevShape, prevPrism,\n        (prism) => prism.foregroundColor = color);\n  }\n\n  handleSwapColors(prevShape, prevPrism) {\n    this.modifyPrism(prevShape, prevPrism, (prism) => {\n      prism.foregroundColor = prevPrism.backgroundColor;\n      prism.backgroundColor = prevPrism.foregroundColor;\n    });\n  }\n\n  handleDeletePrism(prevShape, prevPrism) {\n    this.modifyShape(prevShape, (shape) => {\n      shape.prisms = shape.prisms.filter(prism => prism.id !== prevPrism.id);\n    });\n  }\n\n  renderShapeParams(shape) {\n    return (\n      <div className=\"Group\">\n        <h3>Shape</h3>\n        <p>\n          <label htmlFor=\"roll\">Roll : </label>\n          <input type=\"number\" id=\"roll\" name=\"roll\" min=\"-180\" max=\"180\"\n            step=\"15\" value={shape.roll}\n            onChange={e => this.handleRollChange(shape, e.target.value)} />\n        </p>\n        <p>\n          <label htmlFor=\"pitch\">Pitch : </label>\n          <input type=\"number\" id=\"pitch\" name=\"pitch\" min=\"-180\" max=\"180\"\n            step=\"15\" value={shape.pitch}\n            onChange={e => this.handlePitchChange(shape, e.target.value)} />\n        </p>\n        <p>\n          <label htmlFor=\"yaw\">Yaw : </label>\n          <input type=\"number\" id=\"yaw\" name=\"yaw\" min=\"-180\" max=\"180\"\n            step=\"15\" value={shape.yaw}\n            onChange={e => this.handleYawChange(shape, e.target.value)} />\n        </p>\n        <h3>File</h3>\n        <p>\n          <button id=\"resetShape\" name=\"resetShape\"\n            onClick={() => this.props.onShapeReset()}>Reset</button>\n          <button id=\"showcaseShape\" name=\"showcaseShape\"\n            onClick={() => this.props.onShapeShowcase()}>Showcase</button>\n        </p>\n        <p>\n          <button id=\"importShape\" name=\"importShape\"\n            onClick={() => this.props.onShapeImport()}>Import</button>\n          <button id=\"exportShape\" name=\"exportShape\"\n            onClick={() => this.props.onShapeExport(shape)}>Export</button>\n        </p>\n        <h3>Simulation</h3>\n        <button id=\"startSimulation\" name=\"startSimulation\" disabled={this.props.mode === Modes.SIMULATION}\n            onClick={() => this.props.onSimulationStart()}>Start</button>\n        <button id=\"stopSimulation\" name=\"stopSimulation\" disabled={this.props.mode !== Modes.SIMULATION}\n            onClick={() => this.props.onSimulationStop()}>Stop</button>\n      </div>\n    );\n  }\n\n  renderPrismParams(shape, prism) {\n    return (\n      <div className=\"Group\">\n        <h3>Prism</h3>\n        <p>\n          <label htmlFor=\"colorMask\">Mask : </label>\n          <input type=\"number\" id=\"colorMask\" name=\"colorMask\" min=\"0\" max={COLOR_MASK_COUNT - 1}\n            step=\"1\" value={prism.colorMask}\n            onChange={e => this.handleColorMaskChange(shape, prism, e.target.value)} />\n        </p>\n        <div>\n          <label htmlFor=\"backgroundColor\">Background : </label>\n          <ColorPicker id=\"backgroundColor\" name=\"backgroundColor\" color={prism.backgroundColor}\n            onChange={color => this.handleBackgroundColorChange(shape, prism, color)} />\n        </div>\n        <div>\n          <label htmlFor=\"foregroundColor\">Foreground : </label>\n          <ColorPicker id=\"foregroundColor\" name=\"foregroundColor\" color={prism.foregroundColor}\n            onChange={color => this.handleForegroundColorChange(shape, prism, color)} />\n        </div>\n        <p>\n          <button id=\"swapColors\" name=\"swapColors\"\n            onClick={() => this.handleSwapColors(shape, prism)}>Swap</button>\n        </p>\n        <p>\n          <button id=\"deletePrism\" name=\"deletePrism\" disabled={shape.prisms.length <= 1}\n            onClick={() => this.handleDeletePrism(shape, prism)}>Delete</button>\n        </p>\n      </div>\n    );\n  }\n\n  renderParams() {\n    if (this.props.activePrism) {\n      return this.renderPrismParams(this.props.shape, this.props.activePrism);\n    } else {\n      return this.renderShapeParams(this.props.shape);\n    }\n  }\n\n  renderHistory() {\n    return (\n      <div className=\"Group\">\n        <h3>History</h3>\n        <button id=\"undoHistory\" name=\"undoHistory\" disabled={this.props.historyIndex <= 0}\n            onClick={() => this.props.onHistoryChange(this.props.historyIndex - 1)}>Undo</button>\n        <button id=\"redoHistory\" name=\"redoHistory\" disabled={this.props.historyIndex >= this.props.historyEntries.length - 1}\n            onClick={() => this.props.onHistoryChange(this.props.historyIndex + 1)}>Redo</button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Toolbar\">\n        {this.renderHistory()}\n        {this.renderParams()}\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import { quat, vec3 } from 'gl-matrix';\nimport Prism from './Prism';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst DEFAULT_BACKGROUND_COLOR = \"#1976d2\";\nconst DEFAULT_FOREGROUND_COLOR = \"#d9d9d9\";\n\nclass Shape {\n  constructor() {\n    this.prisms = [];\n    this.lastPrismId = 0;\n    this.roll = 0;\n    this.pitch = 0;\n    this.yaw = 0;\n    this.aabb = {\n      min: vec3.create(),\n      max: vec3.create(),\n      center: vec3.create()\n    };\n  }\n\n  static createInitialShape() {\n    const shape = new Shape();\n    const prism = new Prism();\n    prism.id = ++shape.lastPrismId;\n    prism.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n    prism.foregroundColor = DEFAULT_FOREGROUND_COLOR;\n    shape.prisms.push(prism);\n    shape.applyTransform();\n    return shape;\n  }\n\n  getOrientation() {\n    const orientation = quat.create();\n    quat.rotateY(orientation, orientation, this.yaw * DEGREES_TO_RADIANS);\n    quat.rotateX(orientation, orientation, this.roll * DEGREES_TO_RADIANS);\n    quat.rotateZ(orientation, orientation, this.pitch * DEGREES_TO_RADIANS);\n    return orientation;\n  }\n\n  applyTransform() {\n    const orientation = this.getOrientation();\n    for (let i = 0; i < 2; i++) {\n      vec3.zero(this.aabb.min);\n      vec3.zero(this.aabb.max);\n      for (let j = 0; j < this.prisms.length; j++) {\n        const prism = this.prisms[j];\n        prism.applyTransform(orientation);\n\n        // Compute axis aligned bounding box\n        for (let k = 0; k < prism.vertices.length; k++) {\n          const vertex = prism.vertices[k];\n          if ((j === 0) && (k === 0)) {\n            vec3.copy(this.aabb.min, vertex);\n            vec3.copy(this.aabb.max, vertex);\n          } else {\n            vec3.min(this.aabb.min, this.aabb.min, vertex);\n            vec3.max(this.aabb.max, this.aabb.max, vertex);\n          }\n        }\n      }\n\n      if (i === 0) {\n        // Align to ground\n        const inverseOrientation = quat.invert(quat.create(), orientation);\n        const translation = vec3.fromValues(0, -this.aabb.min[1], 0);\n        vec3.transformQuat(translation, translation, inverseOrientation);\n        this.translate(translation);\n      } else {\n        vec3.add(this.aabb.center, this.aabb.min, this.aabb.max);\n        vec3.scale(this.aabb.center, this.aabb.center, 0.5);\n      }\n    }\n  }\n\n  translate(translation) {\n    this.prisms.forEach(prism => vec3.add(prism.position, prism.position, translation));\n  }\n\n  rotate(rotation) {\n    this.prisms.forEach(prism => {\n      vec3.transformQuat(prism.position, prism.position, rotation);\n      quat.multiply(prism.orientation, rotation, prism.orientation);\n    });\n  }\n\n  findPrism(id) {\n    for (let i = 0; i < this.prisms.length; i++) {\n      const prism = this.prisms[i];\n      if (prism.id === id) {\n        return prism;\n      }\n    }\n    return null;\n  }\n\n  intersect(ray) {\n    let hitPrism;\n    let hitDistance;\n    for (let i = 0; i < this.prisms.length; i++) {\n      const prism = this.prisms[i];\n      const prismHitDistance = prism.intersect(ray);\n      if (prismHitDistance !== undefined) {\n        if ((hitDistance === undefined) || (prismHitDistance < hitDistance)) {\n          hitPrism = prism;\n          hitDistance = prismHitDistance;\n        }\n      }\n    }\n    if (!hitPrism) {\n      return;\n    }\n    return {\n      hitPrism: hitPrism,\n      hitDistance: hitDistance\n    };\n  }\n\n  getAvailableJunctions(prism) {\n    const orientation = this.getOrientation();\n    let junctions = prism.getJunctions();\n    junctions.forEach(junction => {\n      vec3.transformQuat(junction.pivot, junction.pivot, orientation);\n      vec3.transformQuat(junction.normal, junction.normal, orientation);\n      junction.prisms.forEach(junctionPrism => junctionPrism.applyTransform(orientation));\n      junction.prisms = junction.prisms.filter(junctionPrism => this.prisms.every(shapePrism =>\n          (shapePrism === prism) || !shapePrism.collides(junctionPrism)));\n    });\n    return junctions.filter(junction => junction.prisms.length > 0);\n  }\n\n  toArchive() {\n    return {\n      prisms: this.prisms.map(prism => prism.toArchive()),\n      lastPrismId: this.lastPrismId,\n      roll: this.roll,\n      pitch: this.pitch,\n      yaw: this.yaw\n    };\n  }\n\n  fromArchive(archive) {\n    this.prisms = archive.prisms.map(prismArchive => {\n      const prism = new Prism();\n      prism.fromArchive(prismArchive);\n      return prism;\n    });\n    this.lastPrismId = archive.lastPrismId;\n    this.roll = archive.roll;\n    this.pitch = archive.pitch;\n    this.yaw = archive.yaw;\n  }\n\n  clone() {\n    const shape = new Shape();\n    for (let i = 0; i < this.prisms.length; i++) {\n      shape.prisms.push(this.prisms[i].clone());\n    }\n    shape.lastPrismId = this.lastPrismId;\n    shape.roll = this.roll;\n    shape.pitch = this.pitch;\n    shape.yaw = this.yaw;\n    vec3.copy(shape.aabb.min, this.aabb.min);\n    vec3.copy(shape.aabb.max, this.aabb.max);\n    vec3.copy(shape.aabb.center, this.aabb.center);\n    return shape;\n  }\n}\n\nexport default Shape;\n","import Shape from \"./Shape\";\nimport Prism from \"./Prism\";\nimport { vec3, quat } from 'gl-matrix';\nimport { createTransform, rotatedTransform } from './Transform';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nclass ShapeFolder {\n  constructor() {\n    this.pieceCount = 0;\n    this.shape = new Shape();\n  }\n\n  static build(name, figures) {\n    const definition = figures.definitions.find(definition => definition.name === name);\n    if (!definition) {\n      return;\n    }\n    const skin = ShapeFolder.compileSkin(definition.skin, figures);\n    if (!skin) {\n      return;\n    }\n    const shapeFolder = new ShapeFolder();\n    for (let i = 0; i < definition.pieces; i++) {\n      const colors = skin.colors[i % skin.colors.length];\n      shapeFolder.addPrism(skin.mask, colors[0], colors[1]);\n    }\n    if (!shapeFolder.fold(definition.notation)) {\n      return;\n    }\n    if (!shapeFolder.applyRotations(definition.rotations)) {\n      return;\n    }\n    const shape = shapeFolder.shape;\n    shape.applyTransform();\n    shape.translate(vec3.negate(vec3.create(), shape.aabb.center));\n    shape.applyTransform();\n    return shape;\n  }\n\n  static compileSkin(name, figures) {\n    const startPos = (name.charAt(0) === \"~\" ? 1 : 0);\n    const delimPos = name.lastIndexOf(\":\");\n    const skinName = name.substring(startPos, (delimPos !== -1 ? delimPos : name.length));\n    const skinDefinition = figures.skins.definitions.find(definition => definition.name === skinName);\n    if (!skinDefinition) {\n      return;\n    }\n    const skinPattern = figures.skins.patterns.find(pattern => pattern.key === skinDefinition.pattern);\n    if (!skinPattern) {\n      return;\n    }\n\n    const mask = (delimPos === -1 ? skinDefinition.mask : parseInt(name.substring(delimPos + 1)));\n\n    const shapeColors = [];\n    for (const colorNumbers of skinPattern.value) {\n      const prismColors = [];\n      for (const colorNumber of colorNumbers) {\n        if ((colorNumber < 1) || (colorNumber > skinDefinition.colors.length)) {\n          return;\n        }\n        const colorName = skinDefinition.colors[colorNumber - 1];\n        const color = figures.skins.colors.find(color => color.key === colorName);\n        if (!color) {\n          return;\n        }\n        prismColors.push(color.value);\n      }\n      shapeColors.push(prismColors);\n    }\n    const revertColors = (startPos > 0);\n    if (revertColors) {\n      shapeColors.reverse();\n    }\n\n    return {\n      mask: mask,\n      colors: shapeColors\n    };\n  }\n\n  addPrism(colorMask, backgroundColor, foregroundColor) {\n    let prism;\n    if (this.shape.prisms.length > 0) {\n      const leftPrism = this.shape.prisms[this.shape.prisms.length - 1];\n      prism = leftPrism.getJunctions()[1].prisms[0]; // unturned prism of right junction\n    } else {\n      prism = new Prism();\n    }\n    prism.id = ++this.shape.lastPrismId;\n    prism.colorMask = colorMask;\n    prism.backgroundColor = backgroundColor;\n    prism.foregroundColor = foregroundColor;\n    this.shape.prisms.push(prism);\n    this.pieceCount++;\n  }\n\n  /**\n   * Fold the shape using a notation in the following format:\n   * 1. Number of the downward-facing prism (from the left): 1 to (pieceCount+1)/2\n   * 2. Left or right sloping side of the prism: L or R\n   * 3. Position of the twist towards you: 1, 2 or 3\n   * Example: 1R2-2R2-3L2-4L2-6L2-6R2-7R2-9L2-10L2-10R2\n   * @return true if no errors, otherwise false.\n   */\n  fold(notation) {\n    const tokens = notation.split(\"-\");\n    for (let token of tokens) {\n      let pos;\n      let left;\n      if ((pos = token.indexOf(\"L\")) !== -1) {\n        left = true;\n      } else if ((pos = token.indexOf(\"R\")) !== -1) {\n        left = false;\n      } else {\n        return false;\n      }\n      const downwardPrismNumberStr = token.substring(0, pos);\n      if (!downwardPrismNumberStr) {\n        return false;\n      }\n      const downwardPrismNumber = parseInt(downwardPrismNumberStr, 10);\n      const index = (downwardPrismNumber - 1) * 2;\n      if ((index < 0) || (index >= this.pieceCount)) {\n        return false;\n      }\n      const twistsStr = token.substring(pos + 1);\n      if (!twistsStr) {\n        return false;\n      }\n      const twists = parseInt(twistsStr, 10);\n      if (!twists) {\n        continue; // no twist\n      }\n      if ((twists < 1) || (twists > 3)) {\n        return false;\n      }\n\n      if (twists < 3) {\n        for (let i = 0; i < twists; i++) {\n          if (!this.twist(index, left, left)) {\n            return false;\n          }\n        }\n      } else {\n        if (!this.twist(index, left, !left)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Twist left or right adjacent prisms around a downward-facing prism\n   * 90 degrees counter-clockwise or clockwise.\n   * @param index prism index in range [0..pieceCount).\n   * @param left twist left (true) or right (false) adjacent prisms.\n   * @param ccw twist counter-clockwise (true) or clockwise (false).\n   * @return true if prism index is in range, otherwise false.\n   */\n  twist(index, left, ccw) {\n    if ((index < 0) || (index >= this.pieceCount)) {\n      return false;\n    }\n    const prism = this.shape.prisms[index];\n    const junctions = prism.getJunctions();\n    const junction = (left ? junctions[0] : junctions[1]);\n    const twistAngle = (ccw ? 1 : -1) * Math.PI / 2;\n    if (left) {\n      for (let i = index - 1; i >= 0; i--) {\n        this.twistPrism(i, junction.pivot, junction.normal, twistAngle);\n      }\n    } else {\n      for (let i = index + 1; i < this.pieceCount; i++) {\n        this.twistPrism(i, junction.pivot, junction.normal, twistAngle);\n      }\n    }\n    return true;\n  }\n\n  twistPrism(index, pivot, axis, angle) {\n    const prism = this.shape.prisms[index];\n    const prismTransform = createTransform(prism.position, prism.orientation);\n    const transform = rotatedTransform(prismTransform, pivot, axis, angle);\n    vec3.copy(prism.position, transform.position);\n    quat.copy(prism.orientation, transform.orientation);\n  }\n\n  applyRotations(rotations) {\n    if (rotations.length === 0) {\n      return true;\n    }\n    const shapeRotation = quat.create();\n    const rotation = quat.create();\n    const axis = vec3.create();\n    for (const aa of rotations) {\n      if (aa.length === 4) {\n        vec3.set(axis, aa[0], aa[2], -aa[1]);\n        vec3.normalize(axis, axis);\n        quat.setAxisAngle(rotation, axis, aa[3] * DEGREES_TO_RADIANS);\n        quat.multiply(shapeRotation, rotation, shapeRotation);\n      } else {\n        return false;\n      }\n    }\n    this.shape.rotate(shapeRotation);\n    return true;\n  }\n}\n\nexport default ShapeFolder;\n","import './App.css';\nimport React, { Component } from 'react';\nimport Viewport from './Viewport';\nimport Toolbar from './Toolbar';\nimport Shape from './Shape';\nimport ShapeFolder from './ShapeFolder';\n\nconst ARCHIVE_VERSION = 1;\nconst ARCHIVE_EXTENSION = \".twy\";\nconst HISTORY_LENGTH_MAX = 30;\n\nconst Modes = Object.freeze({\n  EDIT: 0,\n  SIMULATION: 1\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const shape = Shape.createInitialShape();\n\n    this.state = {\n      mode: Modes.EDIT,\n      shape: shape,\n      activePrism: null,\n      historyEntries: [],\n      historyIndex: -1\n    };\n    this.figures = null;\n    this.figureRandomIndices = null;\n    this.figureIndex = -1;\n\n    this.addHistoryEntry(this.state, shape);\n  }\n\n  addHistoryEntry(state, shape) {\n    let historyLength = state.historyIndex + 1;\n    const historyStart = (historyLength >= HISTORY_LENGTH_MAX ?\n        historyLength - HISTORY_LENGTH_MAX + 1 : 0);\n    historyLength = Math.min(historyLength, HISTORY_LENGTH_MAX - 1);\n    state.historyEntries = state.historyEntries.splice(historyStart, historyLength);\n    state.historyEntries.push({\n      shape: shape,\n      activePrism: this.state.activePrism\n    });\n    state.historyIndex = state.historyEntries.length - 1;\n  }\n\n  showFigure(name) {\n    const shape = ShapeFolder.build(name, this.figures);\n    if (shape) {\n      this.handleShapeChange(shape, true);\n    }\n  }\n\n  static shapeToArchive(shape) {\n    return JSON.stringify({\n      version: ARCHIVE_VERSION,\n      shape: shape.toArchive()\n    });\n  }\n\n  static archiveToShape(text) {\n    const archive = JSON.parse(text);\n    if (archive.version !== 1) {\n      alert(\"Unsupported version: \" + archive.version);\n      return;\n    }\n    const shape = new Shape();\n    shape.fromArchive(archive.shape);\n    shape.applyTransform();\n    return shape;\n  }\n\n  handleShapeChange(shape, reset = false) {\n    const nextState = {\n      shape: shape,\n      historyEntries: this.state.historyEntries,\n      historyIndex: this.state.historyIndex\n    };\n    if (reset) {\n      nextState.activePrism = null;\n    } else if (this.state.activePrism) {\n      nextState.activePrism = shape.findPrism(this.state.activePrism.id);\n    }\n    this.addHistoryEntry(nextState, shape);\n    this.setState(nextState);\n  }\n\n  handleActivePrismChange(activePrism) {\n    this.setState({ activePrism: activePrism });\n  }\n\n  handleHistoryChange(index) {\n    if ((index < 0) || (index >= this.state.historyEntries.length)) {\n      return;\n    }\n    const historyEntry = this.state.historyEntries[index];\n    const nextState = {\n      shape: historyEntry.shape,\n      activePrism: historyEntry.activePrism,\n      historyIndex: index\n    };\n    this.setState(nextState);\n  }\n\n  handleShapeReset() {\n    this.handleShapeChange(Shape.createInitialShape(), true);\n  }\n\n  handleShapeShowcase() {\n    if (!this.figures) {\n      fetch(\"res/figures.rsf\")\n        .then(response => response.json())\n        .then(data => {\n          this.figures = data;\n          this.figureRandomIndices =\n            [...Array(this.figures.definitions.length).keys()]\n            .map(a => ({sort: Math.random(), value: a}))\n            .sort((a, b) => a.sort - b.sort)\n            .map(a => a.value);\n          this.figureIndex = -1;\n          this.handleShapeShowcase();\n        });\n    } else {\n      this.figureIndex = (this.figureIndex + 1) % this.figureRandomIndices.length;\n      const figureName = this.figures.definitions[this.figureRandomIndices[this.figureIndex]].name;\n      this.showFigure(figureName);\n    }\n  }\n\n  handleShapeImport() {\n    const element = document.createElement(\"input\");\n    element.setAttribute(\"type\", \"file\");\n    element.setAttribute(\"accept\", ARCHIVE_EXTENSION);\n    element.addEventListener(\"change\", () => {\n      if (!element.files.length) {\n        return;\n      }\n      const file = element.files[0];\n      const reader = new FileReader();\n      reader.onload = ((e) => {\n        const shape = App.archiveToShape(e.target.result);\n        if (shape) {\n          this.handleShapeChange(shape, true);\n        }\n      });\n      reader.readAsText(file);\n    });\n    element.click();\n  }\n\n  handleShapeExport(shape) {\n    const name = prompt(\"Enter shape name: \");\n    if (!name) {\n      return;\n    }\n    const element = document.createElement(\"a\");\n    const content = App.shapeToArchive(shape);\n    const file = new Blob([content], {type: \"text/plain;charset=utf-8\"});\n    element.href = URL.createObjectURL(file);\n    element.download = name + ARCHIVE_EXTENSION;\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  handleSimulationStart() {\n    this.setState({ mode: Modes.SIMULATION });\n  }\n\n  handleSimulationStop() {\n    this.setState({ mode: Modes.EDIT });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Viewport mode={this.state.mode} shape={this.state.shape} activePrism={this.state.activePrism}\n          onShapeChange={(shape) => this.handleShapeChange(shape)}\n          onActivePrismChange={(activePrism) => this.handleActivePrismChange(activePrism)} />\n        <Toolbar mode={this.state.mode} shape={this.state.shape} activePrism={this.state.activePrism}\n          historyEntries={this.state.historyEntries} historyIndex={this.state.historyIndex}\n          onShapeChange={(shape) => this.handleShapeChange(shape)}\n          onHistoryChange={(index) => this.handleHistoryChange(index)}\n          onShapeReset={() => this.handleShapeReset()}\n          onShapeShowcase={() => this.handleShapeShowcase()}\n          onShapeImport={() => this.handleShapeImport()}\n          onShapeExport={(shape) => this.handleShapeExport(shape)}\n          onSimulationStart={() => this.handleSimulationStart()}\n          onSimulationStop={() => this.handleSimulationStop()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\nexport { Modes };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}